
Keypad_calculator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003298  08003298  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003298  08003298  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000008c  0800332c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800332c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ca8  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177d  00000000  00000000  00026da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f4  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174de  00000000  00000000  000292ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5c4  00000000  00000000  000407ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000827c7  00000000  00000000  0004ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002548  00000000  00000000  000cd558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000cfaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030d4 	.word	0x080030d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080030d4 	.word	0x080030d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <keypad_row_select>:
static uint16_t keypad_col_gpio_pin[KEYPAD_COL] = {GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_7};
static uint8_t key_current;
static uint8_t key_last;

static void keypad_row_select(uint8_t row)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(keypad_row_gpio_port[row], keypad_row_gpio_pin[row], GPIO_PIN_RESET);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <keypad_row_select+0x2c>)
 800016a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4a06      	ldr	r2, [pc, #24]	; (800018c <keypad_row_select+0x30>)
 8000172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000176:	2200      	movs	r2, #0
 8000178:	4619      	mov	r1, r3
 800017a:	f001 f952 	bl	8001422 <HAL_GPIO_WritePin>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	20000000 	.word	0x20000000
 800018c:	20000010 	.word	0x20000010

08000190 <keypad_row_unselect>:

static void keypad_row_unselect()
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
	for(uint8_t r=0; r<KEYPAD_ROW; r++)
 8000196:	2300      	movs	r3, #0
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	e00e      	b.n	80001ba <keypad_row_unselect+0x2a>
	{
		HAL_GPIO_WritePin(keypad_row_gpio_port[r], keypad_row_gpio_pin[r], GPIO_PIN_SET);
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4a0b      	ldr	r2, [pc, #44]	; (80001cc <keypad_row_unselect+0x3c>)
 80001a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <keypad_row_unselect+0x40>)
 80001a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ac:	2201      	movs	r2, #1
 80001ae:	4619      	mov	r1, r3
 80001b0:	f001 f937 	bl	8001422 <HAL_GPIO_WritePin>
	for(uint8_t r=0; r<KEYPAD_ROW; r++)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	3301      	adds	r3, #1
 80001b8:	71fb      	strb	r3, [r7, #7]
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	2b03      	cmp	r3, #3
 80001be:	d9ed      	bls.n	800019c <keypad_row_unselect+0xc>
	}
}
 80001c0:	bf00      	nop
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	20000000 	.word	0x20000000
 80001d0:	20000010 	.word	0x20000010

080001d4 <keypad_getkey>:

static uint8_t keypad_getkey()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	for(uint8_t r=0; r<KEYPAD_ROW; r++)
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	e028      	b.n	8000232 <keypad_getkey+0x5e>
	{
		keypad_row_unselect();
 80001e0:	f7ff ffd6 	bl	8000190 <keypad_row_unselect>
		keypad_row_select(r);
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb8 	bl	800015c <keypad_row_select>
		for(uint8_t c=0; c<KEYPAD_COL; c++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	71bb      	strb	r3, [r7, #6]
 80001f0:	e019      	b.n	8000226 <keypad_getkey+0x52>
		{
			if(HAL_GPIO_ReadPin(keypad_col_gpio_port[c], keypad_col_gpio_pin[c]) == 0)
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	4a13      	ldr	r2, [pc, #76]	; (8000244 <keypad_getkey+0x70>)
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	4912      	ldr	r1, [pc, #72]	; (8000248 <keypad_getkey+0x74>)
 80001fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000202:	4619      	mov	r1, r3
 8000204:	4610      	mov	r0, r2
 8000206:	f001 f8f5 	bl	80013f4 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d107      	bne.n	8000220 <keypad_getkey+0x4c>
			{
				return KEYPAD_CODE[r][c];
 8000210:	79fa      	ldrb	r2, [r7, #7]
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	490d      	ldr	r1, [pc, #52]	; (800024c <keypad_getkey+0x78>)
 8000216:	0092      	lsls	r2, r2, #2
 8000218:	440a      	add	r2, r1
 800021a:	4413      	add	r3, r2
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	e00c      	b.n	800023a <keypad_getkey+0x66>
		for(uint8_t c=0; c<KEYPAD_COL; c++)
 8000220:	79bb      	ldrb	r3, [r7, #6]
 8000222:	3301      	adds	r3, #1
 8000224:	71bb      	strb	r3, [r7, #6]
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d9e2      	bls.n	80001f2 <keypad_getkey+0x1e>
	for(uint8_t r=0; r<KEYPAD_ROW; r++)
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3301      	adds	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b03      	cmp	r3, #3
 8000236:	d9d3      	bls.n	80001e0 <keypad_getkey+0xc>
			}
		}
	}
	return 0;
 8000238:	2300      	movs	r3, #0
}
 800023a:	4618      	mov	r0, r3
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000018 	.word	0x20000018
 8000248:	20000028 	.word	0x20000028
 800024c:	08003104 	.word	0x08003104

08000250 <keypad_filter>:


static void keypad_filter()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	 static uint8_t key_debounce = 0;
	 static uint8_t is_debouncing = 0;
	 static uint32_t t_debounce = 0;

	uint8_t key = keypad_getkey();
 8000256:	f7ff ffbd 	bl	80001d4 <keypad_getkey>
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]

//Trang thai dang nhieu
	if(key != key_debounce)
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <keypad_filter+0x5c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	429a      	cmp	r2, r3
 8000266:	d00a      	beq.n	800027e <keypad_filter+0x2e>
	{
		key_debounce = key;
 8000268:	4a10      	ldr	r2, [pc, #64]	; (80002ac <keypad_filter+0x5c>)
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	7013      	strb	r3, [r2, #0]
		is_debouncing = 1;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <keypad_filter+0x60>)
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
		t_debounce = HAL_GetTick();
 8000274:	f000 fe28 	bl	8000ec8 <HAL_GetTick>
 8000278:	4603      	mov	r3, r0
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <keypad_filter+0x64>)
 800027c:	6013      	str	r3, [r2, #0]
	}

//Khi da xac lap - het nhieu
	if(is_debouncing && (HAL_GetTick() - t_debounce >= 15))
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <keypad_filter+0x60>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d00e      	beq.n	80002a4 <keypad_filter+0x54>
 8000286:	f000 fe1f 	bl	8000ec8 <HAL_GetTick>
 800028a:	4602      	mov	r2, r0
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <keypad_filter+0x64>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	2b0e      	cmp	r3, #14
 8000294:	d906      	bls.n	80002a4 <keypad_filter+0x54>
	{
		is_debouncing = 0;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <keypad_filter+0x60>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
		key_current = key_debounce;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <keypad_filter+0x5c>)
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <keypad_filter+0x68>)
 80002a2:	701a      	strb	r2, [r3, #0]
	}
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000aa 	.word	0x200000aa
 80002b0:	200000ab 	.word	0x200000ab
 80002b4:	200000ac 	.word	0x200000ac
 80002b8:	200000a8 	.word	0x200000a8

080002bc <keypad_button_release_callback>:

}

//nha phim
__weak void keypad_button_release_callback(uint8_t key)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]

}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <keypad_short_press_callback>:

}

//nhan nha nhanh
__weak void keypad_short_press_callback(uint8_t key)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]

}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <keypad_handle>:

void keypad_handle()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	static uint8_t is_pressing = 0;
	static uint32_t t_press;
	keypad_filter();
 80002e8:	f7ff ffb2 	bl	8000250 <keypad_filter>
	if(key_current != key_last)
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <keypad_handle+0x9c>)
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	4b24      	ldr	r3, [pc, #144]	; (8000384 <keypad_handle+0xa0>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d02b      	beq.n	8000350 <keypad_handle+0x6c>
	{
		if(key_current != 0)
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <keypad_handle+0x9c>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00d      	beq.n	800031c <keypad_handle+0x38>
		{
			t_press = HAL_GetTick();
 8000300:	f000 fde2 	bl	8000ec8 <HAL_GetTick>
 8000304:	4603      	mov	r3, r0
 8000306:	4a20      	ldr	r2, [pc, #128]	; (8000388 <keypad_handle+0xa4>)
 8000308:	6013      	str	r3, [r2, #0]
			is_pressing = 1;
 800030a:	4b20      	ldr	r3, [pc, #128]	; (800038c <keypad_handle+0xa8>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
			keypad_button_press_callback(key_current);
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <keypad_handle+0x9c>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa83 	bl	8000820 <keypad_button_press_callback>
 800031a:	e015      	b.n	8000348 <keypad_handle+0x64>

		}
		else
		{
			is_pressing = 0;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <keypad_handle+0xa8>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - t_press <= 1000)
 8000322:	f000 fdd1 	bl	8000ec8 <HAL_GetTick>
 8000326:	4602      	mov	r2, r0
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <keypad_handle+0xa4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000332:	d804      	bhi.n	800033e <keypad_handle+0x5a>
			{
				keypad_short_press_callback(key_last);
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <keypad_handle+0xa0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ffc9 	bl	80002d0 <keypad_short_press_callback>
			}
			keypad_button_release_callback(key_last);
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <keypad_handle+0xa0>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ffba 	bl	80002bc <keypad_button_release_callback>
		}
		key_last = key_current;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <keypad_handle+0x9c>)
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <keypad_handle+0xa0>)
 800034e:	701a      	strb	r2, [r3, #0]

	}
	if(is_pressing && (HAL_GetTick() - t_press >= 2000))
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <keypad_handle+0xa8>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d010      	beq.n	800037a <keypad_handle+0x96>
 8000358:	f000 fdb6 	bl	8000ec8 <HAL_GetTick>
 800035c:	4602      	mov	r2, r0
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <keypad_handle+0xa4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000368:	d307      	bcc.n	800037a <keypad_handle+0x96>
	{
		is_pressing = 0;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <keypad_handle+0xa8>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
		keypad_button_press_timeout_callback(key_current);
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <keypad_handle+0x9c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fb3b 	bl	80009f0 <keypad_button_press_timeout_callback>
	}

}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000a8 	.word	0x200000a8
 8000384:	200000a9 	.word	0x200000a9
 8000388:	200000b0 	.word	0x200000b0
 800038c:	200000b4 	.word	0x200000b4

08000390 <keypad_init>:

void keypad_init()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	keypad_row_unselect();
 8000394:	f7ff fefc 	bl	8000190 <keypad_row_unselect>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af02      	add	r7, sp, #8
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	f023 030f 	bic.w	r3, r3, #15
 80003ae:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	7a5a      	ldrb	r2, [r3, #9]
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	4313      	orrs	r3, r2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	7a5a      	ldrb	r2, [r3, #9]
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	4313      	orrs	r3, r2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7a5a      	ldrb	r2, [r3, #9]
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	4313      	orrs	r3, r2
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a5a      	ldrb	r2, [r3, #9]
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6858      	ldr	r0, [r3, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	b299      	uxth	r1, r3
 80003fc:	f107 0208 	add.w	r2, r7, #8
 8000400:	2364      	movs	r3, #100	; 0x64
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2304      	movs	r3, #4
 8000406:	f001 f969 	bl	80016dc <HAL_I2C_Master_Transmit>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af02      	add	r7, sp, #8
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	f023 030f 	bic.w	r3, r3, #15
 8000424:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7a5a      	ldrb	r2, [r3, #9]
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	4313      	orrs	r3, r2
 8000434:	b2db      	uxtb	r3, r3
 8000436:	f043 0305 	orr.w	r3, r3, #5
 800043a:	b2db      	uxtb	r3, r3
 800043c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a5a      	ldrb	r2, [r3, #9]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4313      	orrs	r3, r2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7a5a      	ldrb	r2, [r3, #9]
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	4313      	orrs	r3, r2
 8000458:	b2db      	uxtb	r3, r3
 800045a:	f043 0305 	orr.w	r3, r3, #5
 800045e:	b2db      	uxtb	r3, r3
 8000460:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7a5a      	ldrb	r2, [r3, #9]
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	4313      	orrs	r3, r2
 800046a:	b2db      	uxtb	r3, r3
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6858      	ldr	r0, [r3, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	b299      	uxth	r1, r3
 800047e:	f107 0208 	add.w	r2, r7, #8
 8000482:	2364      	movs	r3, #100	; 0x64
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	2304      	movs	r3, #4
 8000488:	f001 f928 	bl	80016dc <HAL_I2C_Master_Transmit>
}
 800048c:	bf00      	nop
 800048e:	3710      	adds	r7, #16
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 800049c:	2101      	movs	r1, #1
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff7c 	bl	800039c <lcd_send_cmd>
	HAL_Delay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fd19 	bl	8000edc <HAL_Delay>
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <lcd_display_on>:
{
	lcd->DisplayControl &= ~LCD_DISPLAYON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_display_on(LiquidCrystal_I2C *lcd) 
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl |= LCD_DISPLAYON;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	7a1b      	ldrb	r3, [r3, #8]
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7a1b      	ldrb	r3, [r3, #8]
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff61 	bl	800039c <lcd_send_cmd>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
 80004f0:	4613      	mov	r3, r2
 80004f2:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <lcd_set_cursor+0x40>)
 80004f6:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	3310      	adds	r3, #16
 80004fc:	443b      	add	r3, r7
 80004fe:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000502:	78bb      	ldrb	r3, [r7, #2]
 8000504:	4413      	add	r3, r2
 8000506:	b2db      	uxtb	r3, r3
 8000508:	b25b      	sxtb	r3, r3
 800050a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800050e:	b25b      	sxtb	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4619      	mov	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff41 	bl	800039c <lcd_send_cmd>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	54144000 	.word	0x54144000

08000528 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7a1b      	ldrb	r3, [r3, #8]
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7a1b      	ldrb	r3, [r3, #8]
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ff26 	bl	800039c <lcd_send_cmd>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8000558:	b40e      	push	{r1, r2, r3}
 800055a:	b590      	push	{r4, r7, lr}
 800055c:	b08a      	sub	sp, #40	; 0x28
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8000562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000566:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f905 	bl	8002780 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000576:	2300      	movs	r3, #0
 8000578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800057c:	e00e      	b.n	800059c <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 800057e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000582:	3328      	adds	r3, #40	; 0x28
 8000584:	443b      	add	r3, r7
 8000586:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800058a:	4619      	mov	r1, r3
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff40 	bl	8000412 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000596:	3301      	adds	r3, #1
 8000598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800059c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fdd1 	bl	800014c <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	429c      	cmp	r4, r3
 80005ae:	d203      	bcs.n	80005b8 <lcd_printf+0x60>
 80005b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d9e2      	bls.n	800057e <lcd_printf+0x26>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005c2:	b003      	add	sp, #12
 80005c4:	4770      	bx	lr

080005c6 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b084      	sub	sp, #16
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	7a1b      	ldrb	r3, [r3, #8]
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f7ff fed1 	bl	800039c <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f7ff fecd 	bl	800039c <lcd_send_cmd>
	HAL_Delay(5);
 8000602:	2005      	movs	r0, #5
 8000604:	f000 fc6a 	bl	8000edc <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8000608:	2101      	movs	r1, #1
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff fec6 	bl	800039c <lcd_send_cmd>
	HAL_Delay(5);
 8000610:	2005      	movs	r0, #5
 8000612:	f000 fc63 	bl	8000edc <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8000616:	210c      	movs	r1, #12
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f7ff febf 	bl	800039c <lcd_send_cmd>
	HAL_Delay(5);
 800061e:	2005      	movs	r0, #5
 8000620:	f000 fc5c 	bl	8000edc <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8000624:	2102      	movs	r1, #2
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f7ff feb8 	bl	800039c <lcd_send_cmd>
	HAL_Delay(5);
 800062c:	2005      	movs	r0, #5
 800062e:	f000 fc55 	bl	8000edc <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff feb1 	bl	800039c <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff ff74 	bl	8000528 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2208      	movs	r2, #8
 8000644:	725a      	strb	r2, [r3, #9]
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <calculate>:

int test_result;
uint8_t syntax_error_flag = 0;

int calculate(char *buff)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	char *operation ;
	int num1, num2;

	operation = strchr(buff,'+');
 8000656:	212b      	movs	r1, #43	; 0x2b
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f002 f8a3 	bl	80027a4 <strchr>
 800065e:	6178      	str	r0, [r7, #20]
	if(operation != NULL)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d010      	beq.n	8000688 <calculate+0x3a>
	{
		*operation = '\0';
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
		num1 = calculate(buff);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ffee 	bl	800064e <calculate>
 8000672:	6138      	str	r0, [r7, #16]
		num2 = calculate(operation+1);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	3301      	adds	r3, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffe8 	bl	800064e <calculate>
 800067e:	60f8      	str	r0, [r7, #12]
		return num1 + num2;
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	e050      	b.n	800072a <calculate+0xdc>
	}

	operation = strchr(buff,'-');
 8000688:	212d      	movs	r1, #45	; 0x2d
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f002 f88a 	bl	80027a4 <strchr>
 8000690:	6178      	str	r0, [r7, #20]
	if(operation != NULL)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d010      	beq.n	80006ba <calculate+0x6c>
	{
		*operation = '\0';
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
		num1 = calculate(buff);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffd5 	bl	800064e <calculate>
 80006a4:	6138      	str	r0, [r7, #16]
		num2 = calculate(operation+1);
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffcf 	bl	800064e <calculate>
 80006b0:	60f8      	str	r0, [r7, #12]
		return num1 - num2;
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	e037      	b.n	800072a <calculate+0xdc>

	}

	operation = strchr(buff,'*');
 80006ba:	212a      	movs	r1, #42	; 0x2a
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f002 f871 	bl	80027a4 <strchr>
 80006c2:	6178      	str	r0, [r7, #20]
	if(operation != NULL)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d011      	beq.n	80006ee <calculate+0xa0>
	{

		*operation = '\0';
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
		num1 = calculate(buff);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ffbc 	bl	800064e <calculate>
 80006d6:	6138      	str	r0, [r7, #16]
		num2 = calculate(operation+1);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffb6 	bl	800064e <calculate>
 80006e2:	60f8      	str	r0, [r7, #12]
		return num1 * num2;
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	fb02 f303 	mul.w	r3, r2, r3
 80006ec:	e01d      	b.n	800072a <calculate+0xdc>

	}

	operation = strchr(buff,'/');
 80006ee:	212f      	movs	r1, #47	; 0x2f
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f002 f857 	bl	80027a4 <strchr>
 80006f6:	6178      	str	r0, [r7, #20]
	if(operation != NULL)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d011      	beq.n	8000722 <calculate+0xd4>
	{
		*operation = '\0';
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
		num1 = calculate(buff);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ffa2 	bl	800064e <calculate>
 800070a:	6138      	str	r0, [r7, #16]
		num2 = calculate(operation+1);
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff9c 	bl	800064e <calculate>
 8000716:	60f8      	str	r0, [r7, #12]
		return num1 / num2;
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000720:	e003      	b.n	800072a <calculate+0xdc>
	}
	return atoi(buff);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f001 ff2e 	bl	8002584 <atoi>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <syntax_error_check>:

void syntax_error_check()
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	if(cal.buff[0] == '*' || cal.buff[0] == '/')
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <syntax_error_check+0xe4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b2a      	cmp	r3, #42	; 0x2a
 8000740:	d003      	beq.n	800074a <syntax_error_check+0x16>
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <syntax_error_check+0xe4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b2f      	cmp	r3, #47	; 0x2f
 8000748:	d102      	bne.n	8000750 <syntax_error_check+0x1c>
	{
		syntax_error_flag = 1;
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <syntax_error_check+0xe8>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
	}
	if(cal.buff[cal.idx-1] < '0' || cal.buff[cal.idx-1] > '9')
 8000750:	4b31      	ldr	r3, [pc, #196]	; (8000818 <syntax_error_check+0xe4>)
 8000752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000756:	3b01      	subs	r3, #1
 8000758:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <syntax_error_check+0xe4>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b2f      	cmp	r3, #47	; 0x2f
 800075e:	d907      	bls.n	8000770 <syntax_error_check+0x3c>
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <syntax_error_check+0xe4>)
 8000762:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000766:	3b01      	subs	r3, #1
 8000768:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <syntax_error_check+0xe4>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	2b39      	cmp	r3, #57	; 0x39
 800076e:	d902      	bls.n	8000776 <syntax_error_check+0x42>
	{
		syntax_error_flag = 1;
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <syntax_error_check+0xe8>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
	}
	for(uint8_t i=0; i<cal.idx-1;i++)
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e040      	b.n	80007fe <syntax_error_check+0xca>
	{
		if(cal.buff[i] == '+' || cal.buff[i] == '-')
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a26      	ldr	r2, [pc, #152]	; (8000818 <syntax_error_check+0xe4>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	2b2b      	cmp	r3, #43	; 0x2b
 8000784:	d004      	beq.n	8000790 <syntax_error_check+0x5c>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a23      	ldr	r2, [pc, #140]	; (8000818 <syntax_error_check+0xe4>)
 800078a:	5cd3      	ldrb	r3, [r2, r3]
 800078c:	2b2d      	cmp	r3, #45	; 0x2d
 800078e:	d10e      	bne.n	80007ae <syntax_error_check+0x7a>
		{
			if(cal.buff[i+1] == '*' || cal.buff[i+1] == '/')
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3301      	adds	r3, #1
 8000794:	4a20      	ldr	r2, [pc, #128]	; (8000818 <syntax_error_check+0xe4>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	2b2a      	cmp	r3, #42	; 0x2a
 800079a:	d005      	beq.n	80007a8 <syntax_error_check+0x74>
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <syntax_error_check+0xe4>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	2b2f      	cmp	r3, #47	; 0x2f
 80007a6:	d102      	bne.n	80007ae <syntax_error_check+0x7a>
			{
				syntax_error_flag = 1;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <syntax_error_check+0xe8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
			}
		}
		if(cal.buff[i] == '*' || cal.buff[i] == '/')
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <syntax_error_check+0xe4>)
 80007b2:	5cd3      	ldrb	r3, [r2, r3]
 80007b4:	2b2a      	cmp	r3, #42	; 0x2a
 80007b6:	d004      	beq.n	80007c2 <syntax_error_check+0x8e>
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <syntax_error_check+0xe4>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	2b2f      	cmp	r3, #47	; 0x2f
 80007c0:	d11a      	bne.n	80007f8 <syntax_error_check+0xc4>
		{
			if(cal.buff[i+1] == '+' || cal.buff[i+1] == '-' || cal.buff[i+1] == '*' || cal.buff[i+1] == '/')
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <syntax_error_check+0xe4>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	2b2b      	cmp	r3, #43	; 0x2b
 80007cc:	d011      	beq.n	80007f2 <syntax_error_check+0xbe>
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <syntax_error_check+0xe4>)
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	2b2d      	cmp	r3, #45	; 0x2d
 80007d8:	d00b      	beq.n	80007f2 <syntax_error_check+0xbe>
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <syntax_error_check+0xe4>)
 80007e0:	5cd3      	ldrb	r3, [r2, r3]
 80007e2:	2b2a      	cmp	r3, #42	; 0x2a
 80007e4:	d005      	beq.n	80007f2 <syntax_error_check+0xbe>
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <syntax_error_check+0xe4>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	2b2f      	cmp	r3, #47	; 0x2f
 80007f0:	d102      	bne.n	80007f8 <syntax_error_check+0xc4>
			{
				syntax_error_flag = 1;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <syntax_error_check+0xe8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<cal.idx-1;i++)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	3301      	adds	r3, #1
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <syntax_error_check+0xe4>)
 8000802:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000806:	3b01      	subs	r3, #1
 8000808:	429a      	cmp	r2, r3
 800080a:	dbb7      	blt.n	800077c <syntax_error_check+0x48>
			}
		}
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000118 	.word	0x20000118
 800081c:	20000150 	.word	0x20000150

08000820 <keypad_button_press_callback>:



//nhan phim
void keypad_button_press_callback(uint8_t key)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	if(cal_state == FINISHED)
 800082a:	4b69      	ldr	r3, [pc, #420]	; (80009d0 <keypad_button_press_callback+0x1b0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d13d      	bne.n	80008ae <keypad_button_press_callback+0x8e>
	{
		if(key >= '0' && key <= '9')
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b2f      	cmp	r3, #47	; 0x2f
 8000836:	d910      	bls.n	800085a <keypad_button_press_callback+0x3a>
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b39      	cmp	r3, #57	; 0x39
 800083c:	d80d      	bhi.n	800085a <keypad_button_press_callback+0x3a>
		{
			cal.idx = 0;
 800083e:	4b65      	ldr	r3, [pc, #404]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cal_state = UNFINISHED;
 8000846:	4b62      	ldr	r3, [pc, #392]	; (80009d0 <keypad_button_press_callback+0x1b0>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]

			lcd_clear_display(&hlcd);
 800084c:	4862      	ldr	r0, [pc, #392]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 800084e:	f7ff fe21 	bl	8000494 <lcd_clear_display>
			HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fb42 	bl	8000edc <HAL_Delay>
 8000858:	e029      	b.n	80008ae <keypad_button_press_callback+0x8e>
		}
		else if(key == '+' || key == '-' || key == '*' || key == '/')
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b2b      	cmp	r3, #43	; 0x2b
 800085e:	d008      	beq.n	8000872 <keypad_button_press_callback+0x52>
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b2d      	cmp	r3, #45	; 0x2d
 8000864:	d005      	beq.n	8000872 <keypad_button_press_callback+0x52>
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b2a      	cmp	r3, #42	; 0x2a
 800086a:	d002      	beq.n	8000872 <keypad_button_press_callback+0x52>
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b2f      	cmp	r3, #47	; 0x2f
 8000870:	d11d      	bne.n	80008ae <keypad_button_press_callback+0x8e>
		{
			char *resultstr = itoa(test_result ,cal.buff,10);
 8000872:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <keypad_button_press_callback+0x1bc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	220a      	movs	r2, #10
 8000878:	4956      	ldr	r1, [pc, #344]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fe9e 	bl	80025bc <itoa>
 8000880:	60f8      	str	r0, [r7, #12]

			cal.idx = cal.idx + strlen(resultstr);
 8000882:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000884:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fc5f 	bl	800014c <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4423      	add	r3, r4
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000898:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cal_state = UNFINISHED;
 800089c:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <keypad_button_press_callback+0x1b0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]

			lcd_clear_display(&hlcd);
 80008a2:	484d      	ldr	r0, [pc, #308]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80008a4:	f7ff fdf6 	bl	8000494 <lcd_clear_display>
			HAL_Delay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fb17 	bl	8000edc <HAL_Delay>
		}
	}

	if(cal_state == UNFINISHED)
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <keypad_button_press_callback+0x1b0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8088 	bne.w	80009c8 <keypad_button_press_callback+0x1a8>
	{
		if(syntax_error_flag == 0)
 80008b8:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <keypad_button_press_callback+0x1c0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f040 8083 	bne.w	80009c8 <keypad_button_press_callback+0x1a8>
		{
			if(key != '=' && key != 'C')
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b3d      	cmp	r3, #61	; 0x3d
 80008c6:	d019      	beq.n	80008fc <keypad_button_press_callback+0xdc>
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b43      	cmp	r3, #67	; 0x43
 80008cc:	d016      	beq.n	80008fc <keypad_button_press_callback+0xdc>
			{
				cal.buff[cal.idx++] = key;
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80008d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	b2d1      	uxtb	r1, r2
 80008d8:	4a3e      	ldr	r2, [pc, #248]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80008da:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 80008de:	4619      	mov	r1, r3
 80008e0:	4a3c      	ldr	r2, [pc, #240]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	5453      	strb	r3, [r2, r1]

				lcd_set_cursor(&hlcd, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	483b      	ldr	r0, [pc, #236]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80008ec:	f7ff fdfa 	bl	80004e4 <lcd_set_cursor>
				lcd_printf(&hlcd, "%s",cal.buff);
 80008f0:	4a38      	ldr	r2, [pc, #224]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80008f2:	493c      	ldr	r1, [pc, #240]	; (80009e4 <keypad_button_press_callback+0x1c4>)
 80008f4:	4838      	ldr	r0, [pc, #224]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80008f6:	f7ff fe2f 	bl	8000558 <lcd_printf>
				lcd_printf(&hlcd,"%s",cal.buff);
			}
		}
	}

}
 80008fa:	e065      	b.n	80009c8 <keypad_button_press_callback+0x1a8>
			else if(key == '=')
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b3d      	cmp	r3, #61	; 0x3d
 8000900:	d143      	bne.n	800098a <keypad_button_press_callback+0x16a>
				syntax_error_check();
 8000902:	f7ff ff17 	bl	8000734 <syntax_error_check>
				if(syntax_error_flag == 0)
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <keypad_button_press_callback+0x1c0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d121      	bne.n	8000952 <keypad_button_press_callback+0x132>
					test_result = calculate(cal.buff);
 800090e:	4831      	ldr	r0, [pc, #196]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000910:	f7ff fe9d 	bl	800064e <calculate>
 8000914:	4603      	mov	r3, r0
 8000916:	4a31      	ldr	r2, [pc, #196]	; (80009dc <keypad_button_press_callback+0x1bc>)
 8000918:	6013      	str	r3, [r2, #0]
					memset(cal.buff,0,cal.idx);
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800091c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000920:	461a      	mov	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	482b      	ldr	r0, [pc, #172]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000926:	f001 ff35 	bl	8002794 <memset>
					cal.idx = 0;
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					cal_state = FINISHED;
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <keypad_button_press_callback+0x1b0>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
					lcd_set_cursor(&hlcd, 1, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 800093e:	f7ff fdd1 	bl	80004e4 <lcd_set_cursor>
					lcd_printf(&hlcd, "%d", test_result);
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <keypad_button_press_callback+0x1bc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4927      	ldr	r1, [pc, #156]	; (80009e8 <keypad_button_press_callback+0x1c8>)
 800094a:	4823      	ldr	r0, [pc, #140]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 800094c:	f7ff fe04 	bl	8000558 <lcd_printf>
}
 8000950:	e03a      	b.n	80009c8 <keypad_button_press_callback+0x1a8>
					lcd_clear_display(&hlcd);
 8000952:	4821      	ldr	r0, [pc, #132]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 8000954:	f7ff fd9e 	bl	8000494 <lcd_clear_display>
					HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fabf 	bl	8000edc <HAL_Delay>
					lcd_set_cursor(&hlcd, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 8000964:	f7ff fdbe 	bl	80004e4 <lcd_set_cursor>
					lcd_printf(&hlcd,"Syntax Error");
 8000968:	4920      	ldr	r1, [pc, #128]	; (80009ec <keypad_button_press_callback+0x1cc>)
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 800096c:	f7ff fdf4 	bl	8000558 <lcd_printf>
					memset(cal.buff,0,cal.idx);
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000972:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000976:	461a      	mov	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800097c:	f001 ff0a 	bl	8002794 <memset>
					cal.idx = 0;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8000988:	e01e      	b.n	80009c8 <keypad_button_press_callback+0x1a8>
				cal.idx--;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800098c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000990:	3b01      	subs	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 8000996:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				cal.buff[cal.idx] = 0;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 800099c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	5499      	strb	r1, [r3, r2]
				lcd_clear_display(&hlcd);
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80009aa:	f7ff fd73 	bl	8000494 <lcd_clear_display>
				HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 fa94 	bl	8000edc <HAL_Delay>
				lcd_set_cursor(&hlcd, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80009ba:	f7ff fd93 	bl	80004e4 <lcd_set_cursor>
				lcd_printf(&hlcd,"%s",cal.buff);
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <keypad_button_press_callback+0x1b4>)
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <keypad_button_press_callback+0x1c4>)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <keypad_button_press_callback+0x1b8>)
 80009c4:	f7ff fdc8 	bl	8000558 <lcd_printf>
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	2000014b 	.word	0x2000014b
 80009d4:	20000118 	.word	0x20000118
 80009d8:	2000010c 	.word	0x2000010c
 80009dc:	2000014c 	.word	0x2000014c
 80009e0:	20000150 	.word	0x20000150
 80009e4:	080030ec 	.word	0x080030ec
 80009e8:	080030f0 	.word	0x080030f0
 80009ec:	080030f4 	.word	0x080030f4

080009f0 <keypad_button_press_timeout_callback>:

//nhan giu
void keypad_button_press_timeout_callback(uint8_t key)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	if(key == 'C')
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b43      	cmp	r3, #67	; 0x43
 80009fe:	d114      	bne.n	8000a2a <keypad_button_press_timeout_callback+0x3a>
	{
		cal_state = UNFINISHED;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <keypad_button_press_timeout_callback+0x44>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		memset(cal.buff,0,cal.idx);
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <keypad_button_press_timeout_callback+0x48>)
 8000a08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <keypad_button_press_timeout_callback+0x48>)
 8000a12:	f001 febf 	bl	8002794 <memset>
		cal.idx = 0;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <keypad_button_press_timeout_callback+0x48>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		syntax_error_flag = 0;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <keypad_button_press_timeout_callback+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]

		lcd_clear_display(&hlcd);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <keypad_button_press_timeout_callback+0x50>)
 8000a26:	f7ff fd35 	bl	8000494 <lcd_clear_display>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000014b 	.word	0x2000014b
 8000a38:	20000118 	.word	0x20000118
 8000a3c:	20000150 	.word	0x20000150
 8000a40:	2000010c 	.word	0x2000010c

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f000 f9e6 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f81a 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f88c 	bl	8000b6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a54:	f000 f85c 	bl	8000b10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 8000a58:	f7ff fc9a 	bl	8000390 <keypad_init>
  lcd_init(&hlcd, &hi2c1, LCD_ADDR_DEFAULT);
 8000a5c:	2227      	movs	r2, #39	; 0x27
 8000a5e:	4907      	ldr	r1, [pc, #28]	; (8000a7c <main+0x38>)
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <main+0x3c>)
 8000a62:	f7ff fdb0 	bl	80005c6 <lcd_init>
  lcd_display_on(&hlcd);
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <main+0x3c>)
 8000a68:	f7ff fd23 	bl	80004b2 <lcd_display_on>
  lcd_set_cursor(&hlcd, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <main+0x3c>)
 8000a72:	f7ff fd37 	bl	80004e4 <lcd_set_cursor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  keypad_handle();
 8000a76:	f7ff fc35 	bl	80002e4 <keypad_handle>
 8000a7a:	e7fc      	b.n	8000a76 <main+0x32>
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	2000010c 	.word	0x2000010c

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	; 0x40
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2228      	movs	r2, #40	; 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fe7e 	bl	8002794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ac2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 f95d 	bl	8001d8c <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ad8:	f000 f89e 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fbca 	bl	8002290 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b02:	f000 f889 	bl	8000c18 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3740      	adds	r7, #64	; 0x40
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MX_I2C1_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_I2C1_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C1_Init+0x50>)
 8000b4e:	f000 fc81 	bl	8001454 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 f85e 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000b8 	.word	0x200000b8
 8000b64:	40005400 	.word	0x40005400
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000b86:	f043 0320 	orr.w	r3, r3, #32
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0320 	and.w	r3, r3, #32
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_GPIO_Init+0xa4>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210f      	movs	r1, #15
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <MX_GPIO_Init+0xa8>)
 8000bce:	f000 fc28 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <MX_GPIO_Init+0xa8>)
 8000bea:	f000 fa7f 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23f0      	movs	r3, #240	; 0xf0
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_GPIO_Init+0xa8>)
 8000c02:	f000 fa73 	bl	80010ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x5c>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_MspInit+0x60>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_MspInit+0x60>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000

08000c88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <HAL_I2C_MspInit+0x70>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_I2C_MspInit+0x78>)
 8000cd4:	f000 fa0a 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000cda:	69db      	ldr	r3, [r3, #28]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce2:	61d3      	str	r3, [r2, #28]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_I2C_MspInit+0x74>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f8ab 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f001 fd1c 	bl	80027c0 <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20005000 	.word	0x20005000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000154 	.word	0x20000154
 8000dbc:	200002a8 	.word	0x200002a8

08000dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dcc:	f7ff fff8 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dd2:	490c      	ldr	r1, [pc, #48]	; (8000e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de8:	4c09      	ldr	r4, [pc, #36]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f001 fce9 	bl	80027cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff fe23 	bl	8000a44 <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000e08:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 8000e0c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000e10:	200002a4 	.word	0x200002a4

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f92b 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fef6 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f935 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f90b 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	20000038 	.word	0x20000038
 8000ea0:	20000034 	.word	0x20000034

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	20000038 	.word	0x20000038
 8000ec4:	20000158 	.word	0x20000158

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000158 	.word	0x20000158

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000038 	.word	0x20000038

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff90 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff49 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff90 	bl	8000fdc <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5f 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fe:	e169      	b.n	80013d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001100:	2201      	movs	r2, #1
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8158 	bne.w	80013ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a9a      	ldr	r2, [pc, #616]	; (800138c <HAL_GPIO_Init+0x2a0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d05e      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
 8001128:	4a98      	ldr	r2, [pc, #608]	; (800138c <HAL_GPIO_Init+0x2a0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d875      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 800112e:	4a98      	ldr	r2, [pc, #608]	; (8001390 <HAL_GPIO_Init+0x2a4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d058      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
 8001134:	4a96      	ldr	r2, [pc, #600]	; (8001390 <HAL_GPIO_Init+0x2a4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d86f      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 800113a:	4a96      	ldr	r2, [pc, #600]	; (8001394 <HAL_GPIO_Init+0x2a8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d052      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
 8001140:	4a94      	ldr	r2, [pc, #592]	; (8001394 <HAL_GPIO_Init+0x2a8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d869      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 8001146:	4a94      	ldr	r2, [pc, #592]	; (8001398 <HAL_GPIO_Init+0x2ac>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d04c      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
 800114c:	4a92      	ldr	r2, [pc, #584]	; (8001398 <HAL_GPIO_Init+0x2ac>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d863      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 8001152:	4a92      	ldr	r2, [pc, #584]	; (800139c <HAL_GPIO_Init+0x2b0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d046      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
 8001158:	4a90      	ldr	r2, [pc, #576]	; (800139c <HAL_GPIO_Init+0x2b0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d85d      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 800115e:	2b12      	cmp	r3, #18
 8001160:	d82a      	bhi.n	80011b8 <HAL_GPIO_Init+0xcc>
 8001162:	2b12      	cmp	r3, #18
 8001164:	d859      	bhi.n	800121a <HAL_GPIO_Init+0x12e>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <HAL_GPIO_Init+0x80>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080011e7 	.word	0x080011e7
 8001170:	080011c1 	.word	0x080011c1
 8001174:	080011d3 	.word	0x080011d3
 8001178:	08001215 	.word	0x08001215
 800117c:	0800121b 	.word	0x0800121b
 8001180:	0800121b 	.word	0x0800121b
 8001184:	0800121b 	.word	0x0800121b
 8001188:	0800121b 	.word	0x0800121b
 800118c:	0800121b 	.word	0x0800121b
 8001190:	0800121b 	.word	0x0800121b
 8001194:	0800121b 	.word	0x0800121b
 8001198:	0800121b 	.word	0x0800121b
 800119c:	0800121b 	.word	0x0800121b
 80011a0:	0800121b 	.word	0x0800121b
 80011a4:	0800121b 	.word	0x0800121b
 80011a8:	0800121b 	.word	0x0800121b
 80011ac:	0800121b 	.word	0x0800121b
 80011b0:	080011c9 	.word	0x080011c9
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	4a79      	ldr	r2, [pc, #484]	; (80013a0 <HAL_GPIO_Init+0x2b4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011be:	e02c      	b.n	800121a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e029      	b.n	800121c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	3304      	adds	r3, #4
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e024      	b.n	800121c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	3308      	adds	r3, #8
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e01f      	b.n	800121c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	330c      	adds	r3, #12
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e01a      	b.n	800121c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ee:	2304      	movs	r3, #4
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e013      	b.n	800121c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	611a      	str	r2, [r3, #16]
          break;
 8001206:	e009      	b.n	800121c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	615a      	str	r2, [r3, #20]
          break;
 8001212:	e003      	b.n	800121c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x130>
          break;
 800121a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d801      	bhi.n	8001226 <HAL_GPIO_Init+0x13a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	e001      	b.n	800122a <HAL_GPIO_Init+0x13e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	d802      	bhi.n	8001238 <HAL_GPIO_Init+0x14c>
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x152>
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	3b08      	subs	r3, #8
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	210f      	movs	r1, #15
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	401a      	ands	r2, r3
 8001250:	6a39      	ldr	r1, [r7, #32]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	431a      	orrs	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80b1 	beq.w	80013ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x2b8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x2b8>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001284:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2bc>)
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001290:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <HAL_GPIO_Init+0x2c0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <HAL_GPIO_Init+0x1ec>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3f      	ldr	r2, [pc, #252]	; (80013b0 <HAL_GPIO_Init+0x2c4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00d      	beq.n	80012d4 <HAL_GPIO_Init+0x1e8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3e      	ldr	r2, [pc, #248]	; (80013b4 <HAL_GPIO_Init+0x2c8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d007      	beq.n	80012d0 <HAL_GPIO_Init+0x1e4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3d      	ldr	r2, [pc, #244]	; (80013b8 <HAL_GPIO_Init+0x2cc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d101      	bne.n	80012cc <HAL_GPIO_Init+0x1e0>
 80012c8:	2303      	movs	r3, #3
 80012ca:	e006      	b.n	80012da <HAL_GPIO_Init+0x1ee>
 80012cc:	2304      	movs	r3, #4
 80012ce:	e004      	b.n	80012da <HAL_GPIO_Init+0x1ee>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e002      	b.n	80012da <HAL_GPIO_Init+0x1ee>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_GPIO_Init+0x1ee>
 80012d8:	2300      	movs	r3, #0
 80012da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012dc:	f002 0203 	and.w	r2, r2, #3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4093      	lsls	r3, r2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ea:	492f      	ldr	r1, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x2bc>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	492c      	ldr	r1, [pc, #176]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	43db      	mvns	r3, r3
 800131a:	4928      	ldr	r1, [pc, #160]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800131c:	4013      	ands	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	4922      	ldr	r1, [pc, #136]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	60cb      	str	r3, [r1, #12]
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	43db      	mvns	r3, r3
 8001342:	491e      	ldr	r1, [pc, #120]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001344:	4013      	ands	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4918      	ldr	r1, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	4914      	ldr	r1, [pc, #80]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800136c:	4013      	ands	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d021      	beq.n	80013c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <HAL_GPIO_Init+0x2d0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e021      	b.n	80013ce <HAL_GPIO_Init+0x2e2>
 800138a:	bf00      	nop
 800138c:	10320000 	.word	0x10320000
 8001390:	10310000 	.word	0x10310000
 8001394:	10220000 	.word	0x10220000
 8001398:	10210000 	.word	0x10210000
 800139c:	10120000 	.word	0x10120000
 80013a0:	10110000 	.word	0x10110000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40010800 	.word	0x40010800
 80013b0:	40010c00 	.word	0x40010c00
 80013b4:	40011000 	.word	0x40011000
 80013b8:	40011400 	.word	0x40011400
 80013bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_GPIO_Init+0x304>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <HAL_GPIO_Init+0x304>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	3301      	adds	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f47f ae8e 	bne.w	8001100 <HAL_GPIO_Init+0x14>
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	372c      	adds	r7, #44	; 0x2c
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40010400 	.word	0x40010400

080013f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	887b      	ldrh	r3, [r7, #2]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e001      	b.n	8001416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]
 800142e:	4613      	mov	r3, r2
 8001430:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001432:	787b      	ldrb	r3, [r7, #1]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143e:	e003      	b.n	8001448 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	041a      	lsls	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e12b      	b.n	80016be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc04 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b8:	f001 f832 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a81      	ldr	r2, [pc, #516]	; (80016c8 <HAL_I2C_Init+0x274>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d807      	bhi.n	80014d8 <HAL_I2C_Init+0x84>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a80      	ldr	r2, [pc, #512]	; (80016cc <HAL_I2C_Init+0x278>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bf94      	ite	ls
 80014d0:	2301      	movls	r3, #1
 80014d2:	2300      	movhi	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e006      	b.n	80014e6 <HAL_I2C_Init+0x92>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a7d      	ldr	r2, [pc, #500]	; (80016d0 <HAL_I2C_Init+0x27c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0e7      	b.n	80016be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a78      	ldr	r2, [pc, #480]	; (80016d4 <HAL_I2C_Init+0x280>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a6a      	ldr	r2, [pc, #424]	; (80016c8 <HAL_I2C_Init+0x274>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d802      	bhi.n	8001528 <HAL_I2C_Init+0xd4>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	e009      	b.n	800153c <HAL_I2C_Init+0xe8>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_I2C_Init+0x284>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800154e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	495c      	ldr	r1, [pc, #368]	; (80016c8 <HAL_I2C_Init+0x274>)
 8001558:	428b      	cmp	r3, r1
 800155a:	d819      	bhi.n	8001590 <HAL_I2C_Init+0x13c>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fbb1 f3f3 	udiv	r3, r1, r3
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001570:	400b      	ands	r3, r1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_I2C_Init+0x138>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e59      	subs	r1, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	3301      	adds	r3, #1
 8001586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158a:	e051      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 800158c:	2304      	movs	r3, #4
 800158e:	e04f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_I2C_Init+0x168>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e012      	b.n	80015e2 <HAL_I2C_Init+0x18e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Init+0x196>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e022      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10e      	bne.n	8001610 <HAL_I2C_Init+0x1bc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e58      	subs	r0, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	440b      	add	r3, r1
 8001600:	fbb0 f3f3 	udiv	r3, r0, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	4313      	orrs	r3, r2
 8001636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800165e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6911      	ldr	r1, [r2, #16]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68d2      	ldr	r2, [r2, #12]
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	000186a0 	.word	0x000186a0
 80016cc:	001e847f 	.word	0x001e847f
 80016d0:	003d08ff 	.word	0x003d08ff
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	10624dd3 	.word	0x10624dd3

080016dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	461a      	mov	r2, r3
 80016e8:	460b      	mov	r3, r1
 80016ea:	817b      	strh	r3, [r7, #10]
 80016ec:	4613      	mov	r3, r2
 80016ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff fbea 	bl	8000ec8 <HAL_GetTick>
 80016f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	f040 80e0 	bne.w	80018c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2319      	movs	r3, #25
 800170a:	2201      	movs	r2, #1
 800170c:	4970      	ldr	r1, [pc, #448]	; (80018d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f964 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	e0d3      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_I2C_Master_Transmit+0x50>
 8001728:	2302      	movs	r3, #2
 800172a:	e0cc      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b01      	cmp	r3, #1
 8001740:	d007      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2221      	movs	r2, #33	; 0x21
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2210      	movs	r2, #16
 800176e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	893a      	ldrh	r2, [r7, #8]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f89c 	bl	80018d8 <I2C_MasterRequestWrite>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e08d      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017c0:	e066      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	6a39      	ldr	r1, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa22 	bl	8001c10 <I2C_WaitOnTXEFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d107      	bne.n	80017ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06b      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b04      	cmp	r3, #4
 800182a:	d11b      	bne.n	8001864 <HAL_I2C_Master_Transmit+0x188>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d017      	beq.n	8001864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	6a39      	ldr	r1, [r7, #32]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 fa19 	bl	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e01a      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	d194      	bne.n	80017c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	00100002 	.word	0x00100002
 80018d4:	ffff0000 	.word	0xffff0000

080018d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d006      	beq.n	8001902 <I2C_MasterRequestWrite+0x2a>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d003      	beq.n	8001902 <I2C_MasterRequestWrite+0x2a>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001900:	d108      	bne.n	8001914 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e00b      	b.n	800192c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	2b12      	cmp	r3, #18
 800191a:	d107      	bne.n	800192c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800192a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f84f 	bl	80019dc <I2C_WaitOnFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001952:	d103      	bne.n	800195c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e035      	b.n	80019cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001968:	d108      	bne.n	800197c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	e01b      	b.n	80019b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800197c:	897b      	ldrh	r3, [r7, #10]
 800197e:	11db      	asrs	r3, r3, #7
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f003 0306 	and.w	r3, r3, #6
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f063 030f 	orn	r3, r3, #15
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <I2C_MasterRequestWrite+0xfc>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f898 	bl	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e010      	b.n	80019cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019aa:	897b      	ldrh	r3, [r7, #10]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <I2C_MasterRequestWrite+0x100>)
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f888 	bl	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	00010008 	.word	0x00010008
 80019d8:	00010002 	.word	0x00010002

080019dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ec:	e048      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d044      	beq.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f6:	f7ff fa67 	bl	8000ec8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d139      	bne.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	e00c      	b.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d116      	bne.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e023      	b.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	0c1b      	lsrs	r3, r3, #16
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10d      	bne.n	8001aa6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	e00c      	b.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	43da      	mvns	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d093      	beq.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ade:	e071      	b.n	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d123      	bne.n	8001b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e067      	b.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d041      	beq.n	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff f9c2 	bl	8000ec8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d136      	bne.n	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10c      	bne.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e00b      	b.n	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0220 	orr.w	r2, r3, #32
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e021      	b.n	8001c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10c      	bne.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e00b      	b.n	8001c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f47f af6d 	bne.w	8001ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c1c:	e034      	b.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f886 	bl	8001d30 <I2C_IsAcknowledgeFailed>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e034      	b.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d028      	beq.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c36:	f7ff f947 	bl	8000ec8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d302      	bcc.n	8001c4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11d      	bne.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b80      	cmp	r3, #128	; 0x80
 8001c58:	d016      	beq.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f043 0220 	orr.w	r2, r3, #32
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e007      	b.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	2b80      	cmp	r3, #128	; 0x80
 8001c94:	d1c3      	bne.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cac:	e034      	b.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f83e 	bl	8001d30 <I2C_IsAcknowledgeFailed>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e034      	b.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d028      	beq.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7ff f8ff 	bl	8000ec8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d302      	bcc.n	8001cdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11d      	bne.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d016      	beq.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e007      	b.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d1c3      	bne.n	8001cae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d46:	d11b      	bne.n	8001d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e272      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4b8f      	ldr	r3, [pc, #572]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24c      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x76>
 8001df4:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7f      	ldr	r2, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xbc>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff f82e 	bl	8000ec8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f82a 	bl	8000ec8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e200      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe4>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff f81a 	bl	8000ec8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f816 	bl	8000ec8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1ec      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x10c>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
 8001ede:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1c0      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4939      	ldr	r1, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe ffcf 	bl	8000ec8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7fe ffcb 	bl	8000ec8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe ffae 	bl	8000ec8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7fe ffaa 	bl	8000ec8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e180      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03a      	beq.n	8002010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe ff8e 	bl	8000ec8 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe ff8a 	bl	8000ec8 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e160      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 faba 	bl	8002548 <RCC_Delay>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe ff74 	bl	8000ec8 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7fe ff70 	bl	8000ec8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e146      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a6 	beq.w	800216a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7fe ff31 	bl	8000ec8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7fe ff2d 	bl	8000ec8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e103      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a69      	ldr	r2, [pc, #420]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a66      	ldr	r2, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x356>
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a60      	ldr	r2, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a5d      	ldr	r2, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe fee1 	bl	8000ec8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fedd 	bl	8000ec8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0b1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x37e>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe fecb 	bl	8000ec8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fec7 	bl	8000ec8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e09b      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d061      	beq.n	8002244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe fe9b 	bl	8000ec8 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fe97 	bl	8000ec8 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e06d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4921      	ldr	r1, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	430b      	orrs	r3, r1
 80021e2:	491b      	ldr	r1, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fe6b 	bl	8000ec8 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fe67 	bl	8000ec8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
 8002214:	e035      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe54 	bl	8000ec8 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fe50 	bl	8000ec8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e026      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
 8002242:	e01e      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e019      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x500>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4965      	ldr	r1, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800230e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d040      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e073      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4936      	ldr	r1, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7fe fda2 	bl	8000ec8 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fd9e 	bl	8000ec8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e053      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d210      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fd00 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08003114 	.word	0x08003114
 800245c:	20000030 	.word	0x20000030
 8002460:	20000034 	.word	0x20000034

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e027      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	e027      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0c9b      	lsrs	r3, r3, #18
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e004      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	613b      	str	r3, [r7, #16]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	693b      	ldr	r3, [r7, #16]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	0800312c 	.word	0x0800312c
 8002504:	0800313c 	.word	0x0800313c
 8002508:	003d0900 	.word	0x003d0900

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_RCC_GetHCLKFreq+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000030 	.word	0x20000030

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002524:	f7ff fff2 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08003124 	.word	0x08003124

08002548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <RCC_Delay+0x34>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <RCC_Delay+0x38>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0a5b      	lsrs	r3, r3, #9
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002564:	bf00      	nop
  }
  while (Delay --);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	60fa      	str	r2, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <RCC_Delay+0x1c>
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000030 	.word	0x20000030
 8002580:	10624dd3 	.word	0x10624dd3

08002584 <atoi>:
 8002584:	220a      	movs	r2, #10
 8002586:	2100      	movs	r1, #0
 8002588:	f000 b898 	b.w	80026bc <strtol>

0800258c <__itoa>:
 800258c:	1e93      	subs	r3, r2, #2
 800258e:	2b22      	cmp	r3, #34	; 0x22
 8002590:	b510      	push	{r4, lr}
 8002592:	460c      	mov	r4, r1
 8002594:	d904      	bls.n	80025a0 <__itoa+0x14>
 8002596:	2300      	movs	r3, #0
 8002598:	461c      	mov	r4, r3
 800259a:	700b      	strb	r3, [r1, #0]
 800259c:	4620      	mov	r0, r4
 800259e:	bd10      	pop	{r4, pc}
 80025a0:	2a0a      	cmp	r2, #10
 80025a2:	d109      	bne.n	80025b8 <__itoa+0x2c>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	da07      	bge.n	80025b8 <__itoa+0x2c>
 80025a8:	232d      	movs	r3, #45	; 0x2d
 80025aa:	700b      	strb	r3, [r1, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	4421      	add	r1, r4
 80025b2:	f000 f88d 	bl	80026d0 <__utoa>
 80025b6:	e7f1      	b.n	800259c <__itoa+0x10>
 80025b8:	2100      	movs	r1, #0
 80025ba:	e7f9      	b.n	80025b0 <__itoa+0x24>

080025bc <itoa>:
 80025bc:	f7ff bfe6 	b.w	800258c <__itoa>

080025c0 <_strtol_l.constprop.0>:
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c6:	4686      	mov	lr, r0
 80025c8:	4690      	mov	r8, r2
 80025ca:	d001      	beq.n	80025d0 <_strtol_l.constprop.0+0x10>
 80025cc:	2b24      	cmp	r3, #36	; 0x24
 80025ce:	d906      	bls.n	80025de <_strtol_l.constprop.0+0x1e>
 80025d0:	f000 f8f6 	bl	80027c0 <__errno>
 80025d4:	2316      	movs	r3, #22
 80025d6:	6003      	str	r3, [r0, #0]
 80025d8:	2000      	movs	r0, #0
 80025da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025de:	460d      	mov	r5, r1
 80025e0:	4835      	ldr	r0, [pc, #212]	; (80026b8 <_strtol_l.constprop.0+0xf8>)
 80025e2:	462a      	mov	r2, r5
 80025e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025e8:	5d06      	ldrb	r6, [r0, r4]
 80025ea:	f016 0608 	ands.w	r6, r6, #8
 80025ee:	d1f8      	bne.n	80025e2 <_strtol_l.constprop.0+0x22>
 80025f0:	2c2d      	cmp	r4, #45	; 0x2d
 80025f2:	d12e      	bne.n	8002652 <_strtol_l.constprop.0+0x92>
 80025f4:	2601      	movs	r6, #1
 80025f6:	782c      	ldrb	r4, [r5, #0]
 80025f8:	1c95      	adds	r5, r2, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d057      	beq.n	80026ae <_strtol_l.constprop.0+0xee>
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d109      	bne.n	8002616 <_strtol_l.constprop.0+0x56>
 8002602:	2c30      	cmp	r4, #48	; 0x30
 8002604:	d107      	bne.n	8002616 <_strtol_l.constprop.0+0x56>
 8002606:	782a      	ldrb	r2, [r5, #0]
 8002608:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800260c:	2a58      	cmp	r2, #88	; 0x58
 800260e:	d149      	bne.n	80026a4 <_strtol_l.constprop.0+0xe4>
 8002610:	2310      	movs	r3, #16
 8002612:	786c      	ldrb	r4, [r5, #1]
 8002614:	3502      	adds	r5, #2
 8002616:	2200      	movs	r2, #0
 8002618:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800261c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002620:	fbbc f9f3 	udiv	r9, ip, r3
 8002624:	4610      	mov	r0, r2
 8002626:	fb03 ca19 	mls	sl, r3, r9, ip
 800262a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800262e:	2f09      	cmp	r7, #9
 8002630:	d814      	bhi.n	800265c <_strtol_l.constprop.0+0x9c>
 8002632:	463c      	mov	r4, r7
 8002634:	42a3      	cmp	r3, r4
 8002636:	dd20      	ble.n	800267a <_strtol_l.constprop.0+0xba>
 8002638:	1c57      	adds	r7, r2, #1
 800263a:	d007      	beq.n	800264c <_strtol_l.constprop.0+0x8c>
 800263c:	4581      	cmp	r9, r0
 800263e:	d319      	bcc.n	8002674 <_strtol_l.constprop.0+0xb4>
 8002640:	d101      	bne.n	8002646 <_strtol_l.constprop.0+0x86>
 8002642:	45a2      	cmp	sl, r4
 8002644:	db16      	blt.n	8002674 <_strtol_l.constprop.0+0xb4>
 8002646:	2201      	movs	r2, #1
 8002648:	fb00 4003 	mla	r0, r0, r3, r4
 800264c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002650:	e7eb      	b.n	800262a <_strtol_l.constprop.0+0x6a>
 8002652:	2c2b      	cmp	r4, #43	; 0x2b
 8002654:	bf04      	itt	eq
 8002656:	782c      	ldrbeq	r4, [r5, #0]
 8002658:	1c95      	addeq	r5, r2, #2
 800265a:	e7ce      	b.n	80025fa <_strtol_l.constprop.0+0x3a>
 800265c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002660:	2f19      	cmp	r7, #25
 8002662:	d801      	bhi.n	8002668 <_strtol_l.constprop.0+0xa8>
 8002664:	3c37      	subs	r4, #55	; 0x37
 8002666:	e7e5      	b.n	8002634 <_strtol_l.constprop.0+0x74>
 8002668:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800266c:	2f19      	cmp	r7, #25
 800266e:	d804      	bhi.n	800267a <_strtol_l.constprop.0+0xba>
 8002670:	3c57      	subs	r4, #87	; 0x57
 8002672:	e7df      	b.n	8002634 <_strtol_l.constprop.0+0x74>
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	e7e8      	b.n	800264c <_strtol_l.constprop.0+0x8c>
 800267a:	1c53      	adds	r3, r2, #1
 800267c:	d108      	bne.n	8002690 <_strtol_l.constprop.0+0xd0>
 800267e:	2322      	movs	r3, #34	; 0x22
 8002680:	4660      	mov	r0, ip
 8002682:	f8ce 3000 	str.w	r3, [lr]
 8002686:	f1b8 0f00 	cmp.w	r8, #0
 800268a:	d0a6      	beq.n	80025da <_strtol_l.constprop.0+0x1a>
 800268c:	1e69      	subs	r1, r5, #1
 800268e:	e006      	b.n	800269e <_strtol_l.constprop.0+0xde>
 8002690:	b106      	cbz	r6, 8002694 <_strtol_l.constprop.0+0xd4>
 8002692:	4240      	negs	r0, r0
 8002694:	f1b8 0f00 	cmp.w	r8, #0
 8002698:	d09f      	beq.n	80025da <_strtol_l.constprop.0+0x1a>
 800269a:	2a00      	cmp	r2, #0
 800269c:	d1f6      	bne.n	800268c <_strtol_l.constprop.0+0xcc>
 800269e:	f8c8 1000 	str.w	r1, [r8]
 80026a2:	e79a      	b.n	80025da <_strtol_l.constprop.0+0x1a>
 80026a4:	2430      	movs	r4, #48	; 0x30
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1b5      	bne.n	8002616 <_strtol_l.constprop.0+0x56>
 80026aa:	2308      	movs	r3, #8
 80026ac:	e7b3      	b.n	8002616 <_strtol_l.constprop.0+0x56>
 80026ae:	2c30      	cmp	r4, #48	; 0x30
 80026b0:	d0a9      	beq.n	8002606 <_strtol_l.constprop.0+0x46>
 80026b2:	230a      	movs	r3, #10
 80026b4:	e7af      	b.n	8002616 <_strtol_l.constprop.0+0x56>
 80026b6:	bf00      	nop
 80026b8:	08003164 	.word	0x08003164

080026bc <strtol>:
 80026bc:	4613      	mov	r3, r2
 80026be:	460a      	mov	r2, r1
 80026c0:	4601      	mov	r1, r0
 80026c2:	4802      	ldr	r0, [pc, #8]	; (80026cc <strtol+0x10>)
 80026c4:	6800      	ldr	r0, [r0, #0]
 80026c6:	f7ff bf7b 	b.w	80025c0 <_strtol_l.constprop.0>
 80026ca:	bf00      	nop
 80026cc:	20000088 	.word	0x20000088

080026d0 <__utoa>:
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	b08b      	sub	sp, #44	; 0x2c
 80026d4:	4605      	mov	r5, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	466e      	mov	r6, sp
 80026da:	4c1d      	ldr	r4, [pc, #116]	; (8002750 <__utoa+0x80>)
 80026dc:	f104 0c20 	add.w	ip, r4, #32
 80026e0:	4637      	mov	r7, r6
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	6861      	ldr	r1, [r4, #4]
 80026e6:	3408      	adds	r4, #8
 80026e8:	c703      	stmia	r7!, {r0, r1}
 80026ea:	4564      	cmp	r4, ip
 80026ec:	463e      	mov	r6, r7
 80026ee:	d1f7      	bne.n	80026e0 <__utoa+0x10>
 80026f0:	7921      	ldrb	r1, [r4, #4]
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	7139      	strb	r1, [r7, #4]
 80026f6:	1e91      	subs	r1, r2, #2
 80026f8:	2922      	cmp	r1, #34	; 0x22
 80026fa:	6038      	str	r0, [r7, #0]
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	d904      	bls.n	800270c <__utoa+0x3c>
 8002702:	7019      	strb	r1, [r3, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	4618      	mov	r0, r3
 8002708:	b00b      	add	sp, #44	; 0x2c
 800270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270c:	1e58      	subs	r0, r3, #1
 800270e:	4684      	mov	ip, r0
 8002710:	fbb5 f7f2 	udiv	r7, r5, r2
 8002714:	fb02 5617 	mls	r6, r2, r7, r5
 8002718:	3628      	adds	r6, #40	; 0x28
 800271a:	446e      	add	r6, sp
 800271c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002720:	460c      	mov	r4, r1
 8002722:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002726:	462e      	mov	r6, r5
 8002728:	42b2      	cmp	r2, r6
 800272a:	463d      	mov	r5, r7
 800272c:	f101 0101 	add.w	r1, r1, #1
 8002730:	d9ee      	bls.n	8002710 <__utoa+0x40>
 8002732:	2200      	movs	r2, #0
 8002734:	545a      	strb	r2, [r3, r1]
 8002736:	1919      	adds	r1, r3, r4
 8002738:	1aa5      	subs	r5, r4, r2
 800273a:	42aa      	cmp	r2, r5
 800273c:	dae3      	bge.n	8002706 <__utoa+0x36>
 800273e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002742:	780e      	ldrb	r6, [r1, #0]
 8002744:	3201      	adds	r2, #1
 8002746:	7006      	strb	r6, [r0, #0]
 8002748:	f801 5901 	strb.w	r5, [r1], #-1
 800274c:	e7f4      	b.n	8002738 <__utoa+0x68>
 800274e:	bf00      	nop
 8002750:	0800313e 	.word	0x0800313e

08002754 <_vsiprintf_r>:
 8002754:	b500      	push	{lr}
 8002756:	b09b      	sub	sp, #108	; 0x6c
 8002758:	9100      	str	r1, [sp, #0]
 800275a:	9104      	str	r1, [sp, #16]
 800275c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002760:	9105      	str	r1, [sp, #20]
 8002762:	9102      	str	r1, [sp, #8]
 8002764:	4905      	ldr	r1, [pc, #20]	; (800277c <_vsiprintf_r+0x28>)
 8002766:	9103      	str	r1, [sp, #12]
 8002768:	4669      	mov	r1, sp
 800276a:	f000 f9a3 	bl	8002ab4 <_svfiprintf_r>
 800276e:	2200      	movs	r2, #0
 8002770:	9b00      	ldr	r3, [sp, #0]
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	b01b      	add	sp, #108	; 0x6c
 8002776:	f85d fb04 	ldr.w	pc, [sp], #4
 800277a:	bf00      	nop
 800277c:	ffff0208 	.word	0xffff0208

08002780 <vsiprintf>:
 8002780:	4613      	mov	r3, r2
 8002782:	460a      	mov	r2, r1
 8002784:	4601      	mov	r1, r0
 8002786:	4802      	ldr	r0, [pc, #8]	; (8002790 <vsiprintf+0x10>)
 8002788:	6800      	ldr	r0, [r0, #0]
 800278a:	f7ff bfe3 	b.w	8002754 <_vsiprintf_r>
 800278e:	bf00      	nop
 8002790:	20000088 	.word	0x20000088

08002794 <memset>:
 8002794:	4603      	mov	r3, r0
 8002796:	4402      	add	r2, r0
 8002798:	4293      	cmp	r3, r2
 800279a:	d100      	bne.n	800279e <memset+0xa>
 800279c:	4770      	bx	lr
 800279e:	f803 1b01 	strb.w	r1, [r3], #1
 80027a2:	e7f9      	b.n	8002798 <memset+0x4>

080027a4 <strchr>:
 80027a4:	4603      	mov	r3, r0
 80027a6:	b2c9      	uxtb	r1, r1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027ae:	b112      	cbz	r2, 80027b6 <strchr+0x12>
 80027b0:	428a      	cmp	r2, r1
 80027b2:	d1f9      	bne.n	80027a8 <strchr+0x4>
 80027b4:	4770      	bx	lr
 80027b6:	2900      	cmp	r1, #0
 80027b8:	bf18      	it	ne
 80027ba:	2000      	movne	r0, #0
 80027bc:	4770      	bx	lr
	...

080027c0 <__errno>:
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <__errno+0x8>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000088 	.word	0x20000088

080027cc <__libc_init_array>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	2600      	movs	r6, #0
 80027d0:	4d0c      	ldr	r5, [pc, #48]	; (8002804 <__libc_init_array+0x38>)
 80027d2:	4c0d      	ldr	r4, [pc, #52]	; (8002808 <__libc_init_array+0x3c>)
 80027d4:	1b64      	subs	r4, r4, r5
 80027d6:	10a4      	asrs	r4, r4, #2
 80027d8:	42a6      	cmp	r6, r4
 80027da:	d109      	bne.n	80027f0 <__libc_init_array+0x24>
 80027dc:	f000 fc7a 	bl	80030d4 <_init>
 80027e0:	2600      	movs	r6, #0
 80027e2:	4d0a      	ldr	r5, [pc, #40]	; (800280c <__libc_init_array+0x40>)
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <__libc_init_array+0x44>)
 80027e6:	1b64      	subs	r4, r4, r5
 80027e8:	10a4      	asrs	r4, r4, #2
 80027ea:	42a6      	cmp	r6, r4
 80027ec:	d105      	bne.n	80027fa <__libc_init_array+0x2e>
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
 80027f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f4:	4798      	blx	r3
 80027f6:	3601      	adds	r6, #1
 80027f8:	e7ee      	b.n	80027d8 <__libc_init_array+0xc>
 80027fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fe:	4798      	blx	r3
 8002800:	3601      	adds	r6, #1
 8002802:	e7f2      	b.n	80027ea <__libc_init_array+0x1e>
 8002804:	08003298 	.word	0x08003298
 8002808:	08003298 	.word	0x08003298
 800280c:	08003298 	.word	0x08003298
 8002810:	0800329c 	.word	0x0800329c

08002814 <__retarget_lock_acquire_recursive>:
 8002814:	4770      	bx	lr

08002816 <__retarget_lock_release_recursive>:
 8002816:	4770      	bx	lr

08002818 <_free_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4605      	mov	r5, r0
 800281c:	2900      	cmp	r1, #0
 800281e:	d040      	beq.n	80028a2 <_free_r+0x8a>
 8002820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002824:	1f0c      	subs	r4, r1, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	bfb8      	it	lt
 800282a:	18e4      	addlt	r4, r4, r3
 800282c:	f000 f8dc 	bl	80029e8 <__malloc_lock>
 8002830:	4a1c      	ldr	r2, [pc, #112]	; (80028a4 <_free_r+0x8c>)
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	b933      	cbnz	r3, 8002844 <_free_r+0x2c>
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	6014      	str	r4, [r2, #0]
 800283a:	4628      	mov	r0, r5
 800283c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002840:	f000 b8d8 	b.w	80029f4 <__malloc_unlock>
 8002844:	42a3      	cmp	r3, r4
 8002846:	d908      	bls.n	800285a <_free_r+0x42>
 8002848:	6820      	ldr	r0, [r4, #0]
 800284a:	1821      	adds	r1, r4, r0
 800284c:	428b      	cmp	r3, r1
 800284e:	bf01      	itttt	eq
 8002850:	6819      	ldreq	r1, [r3, #0]
 8002852:	685b      	ldreq	r3, [r3, #4]
 8002854:	1809      	addeq	r1, r1, r0
 8002856:	6021      	streq	r1, [r4, #0]
 8002858:	e7ed      	b.n	8002836 <_free_r+0x1e>
 800285a:	461a      	mov	r2, r3
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b10b      	cbz	r3, 8002864 <_free_r+0x4c>
 8002860:	42a3      	cmp	r3, r4
 8002862:	d9fa      	bls.n	800285a <_free_r+0x42>
 8002864:	6811      	ldr	r1, [r2, #0]
 8002866:	1850      	adds	r0, r2, r1
 8002868:	42a0      	cmp	r0, r4
 800286a:	d10b      	bne.n	8002884 <_free_r+0x6c>
 800286c:	6820      	ldr	r0, [r4, #0]
 800286e:	4401      	add	r1, r0
 8002870:	1850      	adds	r0, r2, r1
 8002872:	4283      	cmp	r3, r0
 8002874:	6011      	str	r1, [r2, #0]
 8002876:	d1e0      	bne.n	800283a <_free_r+0x22>
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4408      	add	r0, r1
 800287e:	6010      	str	r0, [r2, #0]
 8002880:	6053      	str	r3, [r2, #4]
 8002882:	e7da      	b.n	800283a <_free_r+0x22>
 8002884:	d902      	bls.n	800288c <_free_r+0x74>
 8002886:	230c      	movs	r3, #12
 8002888:	602b      	str	r3, [r5, #0]
 800288a:	e7d6      	b.n	800283a <_free_r+0x22>
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	1821      	adds	r1, r4, r0
 8002890:	428b      	cmp	r3, r1
 8002892:	bf01      	itttt	eq
 8002894:	6819      	ldreq	r1, [r3, #0]
 8002896:	685b      	ldreq	r3, [r3, #4]
 8002898:	1809      	addeq	r1, r1, r0
 800289a:	6021      	streq	r1, [r4, #0]
 800289c:	6063      	str	r3, [r4, #4]
 800289e:	6054      	str	r4, [r2, #4]
 80028a0:	e7cb      	b.n	800283a <_free_r+0x22>
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
 80028a4:	2000029c 	.word	0x2000029c

080028a8 <sbrk_aligned>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	4e0e      	ldr	r6, [pc, #56]	; (80028e4 <sbrk_aligned+0x3c>)
 80028ac:	460c      	mov	r4, r1
 80028ae:	6831      	ldr	r1, [r6, #0]
 80028b0:	4605      	mov	r5, r0
 80028b2:	b911      	cbnz	r1, 80028ba <sbrk_aligned+0x12>
 80028b4:	f000 fbaa 	bl	800300c <_sbrk_r>
 80028b8:	6030      	str	r0, [r6, #0]
 80028ba:	4621      	mov	r1, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 fba5 	bl	800300c <_sbrk_r>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d00a      	beq.n	80028dc <sbrk_aligned+0x34>
 80028c6:	1cc4      	adds	r4, r0, #3
 80028c8:	f024 0403 	bic.w	r4, r4, #3
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d007      	beq.n	80028e0 <sbrk_aligned+0x38>
 80028d0:	1a21      	subs	r1, r4, r0
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 fb9a 	bl	800300c <_sbrk_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	d101      	bne.n	80028e0 <sbrk_aligned+0x38>
 80028dc:	f04f 34ff 	mov.w	r4, #4294967295
 80028e0:	4620      	mov	r0, r4
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	200002a0 	.word	0x200002a0

080028e8 <_malloc_r>:
 80028e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028ec:	1ccd      	adds	r5, r1, #3
 80028ee:	f025 0503 	bic.w	r5, r5, #3
 80028f2:	3508      	adds	r5, #8
 80028f4:	2d0c      	cmp	r5, #12
 80028f6:	bf38      	it	cc
 80028f8:	250c      	movcc	r5, #12
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	4607      	mov	r7, r0
 80028fe:	db01      	blt.n	8002904 <_malloc_r+0x1c>
 8002900:	42a9      	cmp	r1, r5
 8002902:	d905      	bls.n	8002910 <_malloc_r+0x28>
 8002904:	230c      	movs	r3, #12
 8002906:	2600      	movs	r6, #0
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4630      	mov	r0, r6
 800290c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002910:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029e4 <_malloc_r+0xfc>
 8002914:	f000 f868 	bl	80029e8 <__malloc_lock>
 8002918:	f8d8 3000 	ldr.w	r3, [r8]
 800291c:	461c      	mov	r4, r3
 800291e:	bb5c      	cbnz	r4, 8002978 <_malloc_r+0x90>
 8002920:	4629      	mov	r1, r5
 8002922:	4638      	mov	r0, r7
 8002924:	f7ff ffc0 	bl	80028a8 <sbrk_aligned>
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	4604      	mov	r4, r0
 800292c:	d155      	bne.n	80029da <_malloc_r+0xf2>
 800292e:	f8d8 4000 	ldr.w	r4, [r8]
 8002932:	4626      	mov	r6, r4
 8002934:	2e00      	cmp	r6, #0
 8002936:	d145      	bne.n	80029c4 <_malloc_r+0xdc>
 8002938:	2c00      	cmp	r4, #0
 800293a:	d048      	beq.n	80029ce <_malloc_r+0xe6>
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	4631      	mov	r1, r6
 8002940:	4638      	mov	r0, r7
 8002942:	eb04 0903 	add.w	r9, r4, r3
 8002946:	f000 fb61 	bl	800300c <_sbrk_r>
 800294a:	4581      	cmp	r9, r0
 800294c:	d13f      	bne.n	80029ce <_malloc_r+0xe6>
 800294e:	6821      	ldr	r1, [r4, #0]
 8002950:	4638      	mov	r0, r7
 8002952:	1a6d      	subs	r5, r5, r1
 8002954:	4629      	mov	r1, r5
 8002956:	f7ff ffa7 	bl	80028a8 <sbrk_aligned>
 800295a:	3001      	adds	r0, #1
 800295c:	d037      	beq.n	80029ce <_malloc_r+0xe6>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	442b      	add	r3, r5
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	f8d8 3000 	ldr.w	r3, [r8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d038      	beq.n	80029de <_malloc_r+0xf6>
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	42a2      	cmp	r2, r4
 8002970:	d12b      	bne.n	80029ca <_malloc_r+0xe2>
 8002972:	2200      	movs	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e00f      	b.n	8002998 <_malloc_r+0xb0>
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	1b52      	subs	r2, r2, r5
 800297c:	d41f      	bmi.n	80029be <_malloc_r+0xd6>
 800297e:	2a0b      	cmp	r2, #11
 8002980:	d917      	bls.n	80029b2 <_malloc_r+0xca>
 8002982:	1961      	adds	r1, r4, r5
 8002984:	42a3      	cmp	r3, r4
 8002986:	6025      	str	r5, [r4, #0]
 8002988:	bf18      	it	ne
 800298a:	6059      	strne	r1, [r3, #4]
 800298c:	6863      	ldr	r3, [r4, #4]
 800298e:	bf08      	it	eq
 8002990:	f8c8 1000 	streq.w	r1, [r8]
 8002994:	5162      	str	r2, [r4, r5]
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	4638      	mov	r0, r7
 800299a:	f104 060b 	add.w	r6, r4, #11
 800299e:	f000 f829 	bl	80029f4 <__malloc_unlock>
 80029a2:	f026 0607 	bic.w	r6, r6, #7
 80029a6:	1d23      	adds	r3, r4, #4
 80029a8:	1af2      	subs	r2, r6, r3
 80029aa:	d0ae      	beq.n	800290a <_malloc_r+0x22>
 80029ac:	1b9b      	subs	r3, r3, r6
 80029ae:	50a3      	str	r3, [r4, r2]
 80029b0:	e7ab      	b.n	800290a <_malloc_r+0x22>
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	6862      	ldr	r2, [r4, #4]
 80029b6:	d1dd      	bne.n	8002974 <_malloc_r+0x8c>
 80029b8:	f8c8 2000 	str.w	r2, [r8]
 80029bc:	e7ec      	b.n	8002998 <_malloc_r+0xb0>
 80029be:	4623      	mov	r3, r4
 80029c0:	6864      	ldr	r4, [r4, #4]
 80029c2:	e7ac      	b.n	800291e <_malloc_r+0x36>
 80029c4:	4634      	mov	r4, r6
 80029c6:	6876      	ldr	r6, [r6, #4]
 80029c8:	e7b4      	b.n	8002934 <_malloc_r+0x4c>
 80029ca:	4613      	mov	r3, r2
 80029cc:	e7cc      	b.n	8002968 <_malloc_r+0x80>
 80029ce:	230c      	movs	r3, #12
 80029d0:	4638      	mov	r0, r7
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	f000 f80e 	bl	80029f4 <__malloc_unlock>
 80029d8:	e797      	b.n	800290a <_malloc_r+0x22>
 80029da:	6025      	str	r5, [r4, #0]
 80029dc:	e7dc      	b.n	8002998 <_malloc_r+0xb0>
 80029de:	605b      	str	r3, [r3, #4]
 80029e0:	deff      	udf	#255	; 0xff
 80029e2:	bf00      	nop
 80029e4:	2000029c 	.word	0x2000029c

080029e8 <__malloc_lock>:
 80029e8:	4801      	ldr	r0, [pc, #4]	; (80029f0 <__malloc_lock+0x8>)
 80029ea:	f7ff bf13 	b.w	8002814 <__retarget_lock_acquire_recursive>
 80029ee:	bf00      	nop
 80029f0:	20000298 	.word	0x20000298

080029f4 <__malloc_unlock>:
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <__malloc_unlock+0x8>)
 80029f6:	f7ff bf0e 	b.w	8002816 <__retarget_lock_release_recursive>
 80029fa:	bf00      	nop
 80029fc:	20000298 	.word	0x20000298

08002a00 <__ssputs_r>:
 8002a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	461f      	mov	r7, r3
 8002a06:	688e      	ldr	r6, [r1, #8]
 8002a08:	4682      	mov	sl, r0
 8002a0a:	42be      	cmp	r6, r7
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	4690      	mov	r8, r2
 8002a10:	680b      	ldr	r3, [r1, #0]
 8002a12:	d82c      	bhi.n	8002a6e <__ssputs_r+0x6e>
 8002a14:	898a      	ldrh	r2, [r1, #12]
 8002a16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a1a:	d026      	beq.n	8002a6a <__ssputs_r+0x6a>
 8002a1c:	6965      	ldr	r5, [r4, #20]
 8002a1e:	6909      	ldr	r1, [r1, #16]
 8002a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a24:	eba3 0901 	sub.w	r9, r3, r1
 8002a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a2c:	1c7b      	adds	r3, r7, #1
 8002a2e:	444b      	add	r3, r9
 8002a30:	106d      	asrs	r5, r5, #1
 8002a32:	429d      	cmp	r5, r3
 8002a34:	bf38      	it	cc
 8002a36:	461d      	movcc	r5, r3
 8002a38:	0553      	lsls	r3, r2, #21
 8002a3a:	d527      	bpl.n	8002a8c <__ssputs_r+0x8c>
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f7ff ff53 	bl	80028e8 <_malloc_r>
 8002a42:	4606      	mov	r6, r0
 8002a44:	b360      	cbz	r0, 8002aa0 <__ssputs_r+0xa0>
 8002a46:	464a      	mov	r2, r9
 8002a48:	6921      	ldr	r1, [r4, #16]
 8002a4a:	f000 fafd 	bl	8003048 <memcpy>
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	6126      	str	r6, [r4, #16]
 8002a5c:	444e      	add	r6, r9
 8002a5e:	6026      	str	r6, [r4, #0]
 8002a60:	463e      	mov	r6, r7
 8002a62:	6165      	str	r5, [r4, #20]
 8002a64:	eba5 0509 	sub.w	r5, r5, r9
 8002a68:	60a5      	str	r5, [r4, #8]
 8002a6a:	42be      	cmp	r6, r7
 8002a6c:	d900      	bls.n	8002a70 <__ssputs_r+0x70>
 8002a6e:	463e      	mov	r6, r7
 8002a70:	4632      	mov	r2, r6
 8002a72:	4641      	mov	r1, r8
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	f000 faaf 	bl	8002fd8 <memmove>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	68a3      	ldr	r3, [r4, #8]
 8002a7e:	1b9b      	subs	r3, r3, r6
 8002a80:	60a3      	str	r3, [r4, #8]
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	4433      	add	r3, r6
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a8c:	462a      	mov	r2, r5
 8002a8e:	f000 fae9 	bl	8003064 <_realloc_r>
 8002a92:	4606      	mov	r6, r0
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1e0      	bne.n	8002a5a <__ssputs_r+0x5a>
 8002a98:	4650      	mov	r0, sl
 8002a9a:	6921      	ldr	r1, [r4, #16]
 8002a9c:	f7ff febc 	bl	8002818 <_free_r>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	f8ca 3000 	str.w	r3, [sl]
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	e7e9      	b.n	8002a88 <__ssputs_r+0x88>

08002ab4 <_svfiprintf_r>:
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	4698      	mov	r8, r3
 8002aba:	898b      	ldrh	r3, [r1, #12]
 8002abc:	4607      	mov	r7, r0
 8002abe:	061b      	lsls	r3, r3, #24
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	b09d      	sub	sp, #116	; 0x74
 8002ac6:	d50e      	bpl.n	8002ae6 <_svfiprintf_r+0x32>
 8002ac8:	690b      	ldr	r3, [r1, #16]
 8002aca:	b963      	cbnz	r3, 8002ae6 <_svfiprintf_r+0x32>
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	f7ff ff0b 	bl	80028e8 <_malloc_r>
 8002ad2:	6028      	str	r0, [r5, #0]
 8002ad4:	6128      	str	r0, [r5, #16]
 8002ad6:	b920      	cbnz	r0, 8002ae2 <_svfiprintf_r+0x2e>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	e0d0      	b.n	8002c84 <_svfiprintf_r+0x1d0>
 8002ae2:	2340      	movs	r3, #64	; 0x40
 8002ae4:	616b      	str	r3, [r5, #20]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8002aea:	2320      	movs	r3, #32
 8002aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002af0:	2330      	movs	r3, #48	; 0x30
 8002af2:	f04f 0901 	mov.w	r9, #1
 8002af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002afa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c9c <_svfiprintf_r+0x1e8>
 8002afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b02:	4623      	mov	r3, r4
 8002b04:	469a      	mov	sl, r3
 8002b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b0a:	b10a      	cbz	r2, 8002b10 <_svfiprintf_r+0x5c>
 8002b0c:	2a25      	cmp	r2, #37	; 0x25
 8002b0e:	d1f9      	bne.n	8002b04 <_svfiprintf_r+0x50>
 8002b10:	ebba 0b04 	subs.w	fp, sl, r4
 8002b14:	d00b      	beq.n	8002b2e <_svfiprintf_r+0x7a>
 8002b16:	465b      	mov	r3, fp
 8002b18:	4622      	mov	r2, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	f7ff ff6f 	bl	8002a00 <__ssputs_r>
 8002b22:	3001      	adds	r0, #1
 8002b24:	f000 80a9 	beq.w	8002c7a <_svfiprintf_r+0x1c6>
 8002b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b2a:	445a      	add	r2, fp
 8002b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8002b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a1 	beq.w	8002c7a <_svfiprintf_r+0x1c6>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b42:	f10a 0a01 	add.w	sl, sl, #1
 8002b46:	9304      	str	r3, [sp, #16]
 8002b48:	9307      	str	r3, [sp, #28]
 8002b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8002b50:	4654      	mov	r4, sl
 8002b52:	2205      	movs	r2, #5
 8002b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b58:	4850      	ldr	r0, [pc, #320]	; (8002c9c <_svfiprintf_r+0x1e8>)
 8002b5a:	f000 fa67 	bl	800302c <memchr>
 8002b5e:	9a04      	ldr	r2, [sp, #16]
 8002b60:	b9d8      	cbnz	r0, 8002b9a <_svfiprintf_r+0xe6>
 8002b62:	06d0      	lsls	r0, r2, #27
 8002b64:	bf44      	itt	mi
 8002b66:	2320      	movmi	r3, #32
 8002b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b6c:	0711      	lsls	r1, r2, #28
 8002b6e:	bf44      	itt	mi
 8002b70:	232b      	movmi	r3, #43	; 0x2b
 8002b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b76:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7c:	d015      	beq.n	8002baa <_svfiprintf_r+0xf6>
 8002b7e:	4654      	mov	r4, sl
 8002b80:	2000      	movs	r0, #0
 8002b82:	f04f 0c0a 	mov.w	ip, #10
 8002b86:	9a07      	ldr	r2, [sp, #28]
 8002b88:	4621      	mov	r1, r4
 8002b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b8e:	3b30      	subs	r3, #48	; 0x30
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	d94d      	bls.n	8002c30 <_svfiprintf_r+0x17c>
 8002b94:	b1b0      	cbz	r0, 8002bc4 <_svfiprintf_r+0x110>
 8002b96:	9207      	str	r2, [sp, #28]
 8002b98:	e014      	b.n	8002bc4 <_svfiprintf_r+0x110>
 8002b9a:	eba0 0308 	sub.w	r3, r0, r8
 8002b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	46a2      	mov	sl, r4
 8002ba6:	9304      	str	r3, [sp, #16]
 8002ba8:	e7d2      	b.n	8002b50 <_svfiprintf_r+0x9c>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	1d19      	adds	r1, r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	9103      	str	r1, [sp, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bfbb      	ittet	lt
 8002bb6:	425b      	neglt	r3, r3
 8002bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bbc:	9307      	strge	r3, [sp, #28]
 8002bbe:	9307      	strlt	r3, [sp, #28]
 8002bc0:	bfb8      	it	lt
 8002bc2:	9204      	strlt	r2, [sp, #16]
 8002bc4:	7823      	ldrb	r3, [r4, #0]
 8002bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc8:	d10c      	bne.n	8002be4 <_svfiprintf_r+0x130>
 8002bca:	7863      	ldrb	r3, [r4, #1]
 8002bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bce:	d134      	bne.n	8002c3a <_svfiprintf_r+0x186>
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	3402      	adds	r4, #2
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	9203      	str	r2, [sp, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bfb8      	it	lt
 8002bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8002be2:	9305      	str	r3, [sp, #20]
 8002be4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002ca0 <_svfiprintf_r+0x1ec>
 8002be8:	2203      	movs	r2, #3
 8002bea:	4650      	mov	r0, sl
 8002bec:	7821      	ldrb	r1, [r4, #0]
 8002bee:	f000 fa1d 	bl	800302c <memchr>
 8002bf2:	b138      	cbz	r0, 8002c04 <_svfiprintf_r+0x150>
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	9b04      	ldr	r3, [sp, #16]
 8002bf8:	eba0 000a 	sub.w	r0, r0, sl
 8002bfc:	4082      	lsls	r2, r0
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	3401      	adds	r4, #1
 8002c02:	9304      	str	r3, [sp, #16]
 8002c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c08:	2206      	movs	r2, #6
 8002c0a:	4826      	ldr	r0, [pc, #152]	; (8002ca4 <_svfiprintf_r+0x1f0>)
 8002c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c10:	f000 fa0c 	bl	800302c <memchr>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d038      	beq.n	8002c8a <_svfiprintf_r+0x1d6>
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <_svfiprintf_r+0x1f4>)
 8002c1a:	bb1b      	cbnz	r3, 8002c64 <_svfiprintf_r+0x1b0>
 8002c1c:	9b03      	ldr	r3, [sp, #12]
 8002c1e:	3307      	adds	r3, #7
 8002c20:	f023 0307 	bic.w	r3, r3, #7
 8002c24:	3308      	adds	r3, #8
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c2a:	4433      	add	r3, r6
 8002c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2e:	e768      	b.n	8002b02 <_svfiprintf_r+0x4e>
 8002c30:	460c      	mov	r4, r1
 8002c32:	2001      	movs	r0, #1
 8002c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c38:	e7a6      	b.n	8002b88 <_svfiprintf_r+0xd4>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f04f 0c0a 	mov.w	ip, #10
 8002c40:	4619      	mov	r1, r3
 8002c42:	3401      	adds	r4, #1
 8002c44:	9305      	str	r3, [sp, #20]
 8002c46:	4620      	mov	r0, r4
 8002c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c4c:	3a30      	subs	r2, #48	; 0x30
 8002c4e:	2a09      	cmp	r2, #9
 8002c50:	d903      	bls.n	8002c5a <_svfiprintf_r+0x1a6>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0c6      	beq.n	8002be4 <_svfiprintf_r+0x130>
 8002c56:	9105      	str	r1, [sp, #20]
 8002c58:	e7c4      	b.n	8002be4 <_svfiprintf_r+0x130>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c62:	e7f0      	b.n	8002c46 <_svfiprintf_r+0x192>
 8002c64:	ab03      	add	r3, sp, #12
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	462a      	mov	r2, r5
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <_svfiprintf_r+0x1f8>)
 8002c6e:	a904      	add	r1, sp, #16
 8002c70:	f3af 8000 	nop.w
 8002c74:	1c42      	adds	r2, r0, #1
 8002c76:	4606      	mov	r6, r0
 8002c78:	d1d6      	bne.n	8002c28 <_svfiprintf_r+0x174>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	065b      	lsls	r3, r3, #25
 8002c7e:	f53f af2d 	bmi.w	8002adc <_svfiprintf_r+0x28>
 8002c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c84:	b01d      	add	sp, #116	; 0x74
 8002c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c8a:	ab03      	add	r3, sp, #12
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	462a      	mov	r2, r5
 8002c90:	4638      	mov	r0, r7
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <_svfiprintf_r+0x1f8>)
 8002c94:	a904      	add	r1, sp, #16
 8002c96:	f000 f87d 	bl	8002d94 <_printf_i>
 8002c9a:	e7eb      	b.n	8002c74 <_svfiprintf_r+0x1c0>
 8002c9c:	08003264 	.word	0x08003264
 8002ca0:	0800326a 	.word	0x0800326a
 8002ca4:	0800326e 	.word	0x0800326e
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	08002a01 	.word	0x08002a01

08002cb0 <_printf_common>:
 8002cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	4616      	mov	r6, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	688a      	ldr	r2, [r1, #8]
 8002cba:	690b      	ldr	r3, [r1, #16]
 8002cbc:	4607      	mov	r7, r0
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bfb8      	it	lt
 8002cc2:	4613      	movlt	r3, r2
 8002cc4:	6033      	str	r3, [r6, #0]
 8002cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cca:	460c      	mov	r4, r1
 8002ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd0:	b10a      	cbz	r2, 8002cd6 <_printf_common+0x26>
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	6033      	str	r3, [r6, #0]
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	0699      	lsls	r1, r3, #26
 8002cda:	bf42      	ittt	mi
 8002cdc:	6833      	ldrmi	r3, [r6, #0]
 8002cde:	3302      	addmi	r3, #2
 8002ce0:	6033      	strmi	r3, [r6, #0]
 8002ce2:	6825      	ldr	r5, [r4, #0]
 8002ce4:	f015 0506 	ands.w	r5, r5, #6
 8002ce8:	d106      	bne.n	8002cf8 <_printf_common+0x48>
 8002cea:	f104 0a19 	add.w	sl, r4, #25
 8002cee:	68e3      	ldr	r3, [r4, #12]
 8002cf0:	6832      	ldr	r2, [r6, #0]
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	42ab      	cmp	r3, r5
 8002cf6:	dc2b      	bgt.n	8002d50 <_printf_common+0xa0>
 8002cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cfc:	1e13      	subs	r3, r2, #0
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	bf18      	it	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	0692      	lsls	r2, r2, #26
 8002d06:	d430      	bmi.n	8002d6a <_printf_common+0xba>
 8002d08:	4649      	mov	r1, r9
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d10:	47c0      	blx	r8
 8002d12:	3001      	adds	r0, #1
 8002d14:	d023      	beq.n	8002d5e <_printf_common+0xae>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	f003 0306 	and.w	r3, r3, #6
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf14      	ite	ne
 8002d22:	2500      	movne	r5, #0
 8002d24:	6833      	ldreq	r3, [r6, #0]
 8002d26:	f04f 0600 	mov.w	r6, #0
 8002d2a:	bf08      	it	eq
 8002d2c:	68e5      	ldreq	r5, [r4, #12]
 8002d2e:	f104 041a 	add.w	r4, r4, #26
 8002d32:	bf08      	it	eq
 8002d34:	1aed      	subeq	r5, r5, r3
 8002d36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	42b5      	cmp	r5, r6
 8002d4a:	d11a      	bne.n	8002d82 <_printf_common+0xd2>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e008      	b.n	8002d62 <_printf_common+0xb2>
 8002d50:	2301      	movs	r3, #1
 8002d52:	4652      	mov	r2, sl
 8002d54:	4649      	mov	r1, r9
 8002d56:	4638      	mov	r0, r7
 8002d58:	47c0      	blx	r8
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d103      	bne.n	8002d66 <_printf_common+0xb6>
 8002d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d66:	3501      	adds	r5, #1
 8002d68:	e7c1      	b.n	8002cee <_printf_common+0x3e>
 8002d6a:	2030      	movs	r0, #48	; 0x30
 8002d6c:	18e1      	adds	r1, r4, r3
 8002d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d78:	4422      	add	r2, r4
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d80:	e7c2      	b.n	8002d08 <_printf_common+0x58>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4622      	mov	r2, r4
 8002d86:	4649      	mov	r1, r9
 8002d88:	4638      	mov	r0, r7
 8002d8a:	47c0      	blx	r8
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d0e6      	beq.n	8002d5e <_printf_common+0xae>
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7d9      	b.n	8002d48 <_printf_common+0x98>

08002d94 <_printf_i>:
 8002d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d98:	7e0f      	ldrb	r7, [r1, #24]
 8002d9a:	4691      	mov	r9, r2
 8002d9c:	2f78      	cmp	r7, #120	; 0x78
 8002d9e:	4680      	mov	r8, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	469a      	mov	sl, r3
 8002da4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002daa:	d807      	bhi.n	8002dbc <_printf_i+0x28>
 8002dac:	2f62      	cmp	r7, #98	; 0x62
 8002dae:	d80a      	bhi.n	8002dc6 <_printf_i+0x32>
 8002db0:	2f00      	cmp	r7, #0
 8002db2:	f000 80d5 	beq.w	8002f60 <_printf_i+0x1cc>
 8002db6:	2f58      	cmp	r7, #88	; 0x58
 8002db8:	f000 80c1 	beq.w	8002f3e <_printf_i+0x1aa>
 8002dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc4:	e03a      	b.n	8002e3c <_printf_i+0xa8>
 8002dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dca:	2b15      	cmp	r3, #21
 8002dcc:	d8f6      	bhi.n	8002dbc <_printf_i+0x28>
 8002dce:	a101      	add	r1, pc, #4	; (adr r1, 8002dd4 <_printf_i+0x40>)
 8002dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dd4:	08002e2d 	.word	0x08002e2d
 8002dd8:	08002e41 	.word	0x08002e41
 8002ddc:	08002dbd 	.word	0x08002dbd
 8002de0:	08002dbd 	.word	0x08002dbd
 8002de4:	08002dbd 	.word	0x08002dbd
 8002de8:	08002dbd 	.word	0x08002dbd
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002dbd 	.word	0x08002dbd
 8002df4:	08002dbd 	.word	0x08002dbd
 8002df8:	08002dbd 	.word	0x08002dbd
 8002dfc:	08002dbd 	.word	0x08002dbd
 8002e00:	08002f47 	.word	0x08002f47
 8002e04:	08002e6d 	.word	0x08002e6d
 8002e08:	08002f01 	.word	0x08002f01
 8002e0c:	08002dbd 	.word	0x08002dbd
 8002e10:	08002dbd 	.word	0x08002dbd
 8002e14:	08002f69 	.word	0x08002f69
 8002e18:	08002dbd 	.word	0x08002dbd
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	08002dbd 	.word	0x08002dbd
 8002e24:	08002dbd 	.word	0x08002dbd
 8002e28:	08002f09 	.word	0x08002f09
 8002e2c:	682b      	ldr	r3, [r5, #0]
 8002e2e:	1d1a      	adds	r2, r3, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	602a      	str	r2, [r5, #0]
 8002e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0a0      	b.n	8002f82 <_printf_i+0x1ee>
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	0607      	lsls	r7, r0, #24
 8002e46:	f103 0104 	add.w	r1, r3, #4
 8002e4a:	6029      	str	r1, [r5, #0]
 8002e4c:	d501      	bpl.n	8002e52 <_printf_i+0xbe>
 8002e4e:	681e      	ldr	r6, [r3, #0]
 8002e50:	e003      	b.n	8002e5a <_printf_i+0xc6>
 8002e52:	0646      	lsls	r6, r0, #25
 8002e54:	d5fb      	bpl.n	8002e4e <_printf_i+0xba>
 8002e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e5a:	2e00      	cmp	r6, #0
 8002e5c:	da03      	bge.n	8002e66 <_printf_i+0xd2>
 8002e5e:	232d      	movs	r3, #45	; 0x2d
 8002e60:	4276      	negs	r6, r6
 8002e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e66:	230a      	movs	r3, #10
 8002e68:	4859      	ldr	r0, [pc, #356]	; (8002fd0 <_printf_i+0x23c>)
 8002e6a:	e012      	b.n	8002e92 <_printf_i+0xfe>
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	1d19      	adds	r1, r3, #4
 8002e72:	6029      	str	r1, [r5, #0]
 8002e74:	0605      	lsls	r5, r0, #24
 8002e76:	d501      	bpl.n	8002e7c <_printf_i+0xe8>
 8002e78:	681e      	ldr	r6, [r3, #0]
 8002e7a:	e002      	b.n	8002e82 <_printf_i+0xee>
 8002e7c:	0641      	lsls	r1, r0, #25
 8002e7e:	d5fb      	bpl.n	8002e78 <_printf_i+0xe4>
 8002e80:	881e      	ldrh	r6, [r3, #0]
 8002e82:	2f6f      	cmp	r7, #111	; 0x6f
 8002e84:	bf0c      	ite	eq
 8002e86:	2308      	moveq	r3, #8
 8002e88:	230a      	movne	r3, #10
 8002e8a:	4851      	ldr	r0, [pc, #324]	; (8002fd0 <_printf_i+0x23c>)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e92:	6865      	ldr	r5, [r4, #4]
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	bfa8      	it	ge
 8002e98:	6821      	ldrge	r1, [r4, #0]
 8002e9a:	60a5      	str	r5, [r4, #8]
 8002e9c:	bfa4      	itt	ge
 8002e9e:	f021 0104 	bicge.w	r1, r1, #4
 8002ea2:	6021      	strge	r1, [r4, #0]
 8002ea4:	b90e      	cbnz	r6, 8002eaa <_printf_i+0x116>
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d04b      	beq.n	8002f42 <_printf_i+0x1ae>
 8002eaa:	4615      	mov	r5, r2
 8002eac:	fbb6 f1f3 	udiv	r1, r6, r3
 8002eb0:	fb03 6711 	mls	r7, r3, r1, r6
 8002eb4:	5dc7      	ldrb	r7, [r0, r7]
 8002eb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002eba:	4637      	mov	r7, r6
 8002ebc:	42bb      	cmp	r3, r7
 8002ebe:	460e      	mov	r6, r1
 8002ec0:	d9f4      	bls.n	8002eac <_printf_i+0x118>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d10b      	bne.n	8002ede <_printf_i+0x14a>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	07de      	lsls	r6, r3, #31
 8002eca:	d508      	bpl.n	8002ede <_printf_i+0x14a>
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	6861      	ldr	r1, [r4, #4]
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	bfde      	ittt	le
 8002ed4:	2330      	movle	r3, #48	; 0x30
 8002ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ede:	1b52      	subs	r2, r2, r5
 8002ee0:	6122      	str	r2, [r4, #16]
 8002ee2:	464b      	mov	r3, r9
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	f8cd a000 	str.w	sl, [sp]
 8002eec:	aa03      	add	r2, sp, #12
 8002eee:	f7ff fedf 	bl	8002cb0 <_printf_common>
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d14a      	bne.n	8002f8c <_printf_i+0x1f8>
 8002ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8002efa:	b004      	add	sp, #16
 8002efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	6023      	str	r3, [r4, #0]
 8002f08:	2778      	movs	r7, #120	; 0x78
 8002f0a:	4832      	ldr	r0, [pc, #200]	; (8002fd4 <_printf_i+0x240>)
 8002f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	6829      	ldr	r1, [r5, #0]
 8002f14:	061f      	lsls	r7, r3, #24
 8002f16:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f1a:	d402      	bmi.n	8002f22 <_printf_i+0x18e>
 8002f1c:	065f      	lsls	r7, r3, #25
 8002f1e:	bf48      	it	mi
 8002f20:	b2b6      	uxthmi	r6, r6
 8002f22:	07df      	lsls	r7, r3, #31
 8002f24:	bf48      	it	mi
 8002f26:	f043 0320 	orrmi.w	r3, r3, #32
 8002f2a:	6029      	str	r1, [r5, #0]
 8002f2c:	bf48      	it	mi
 8002f2e:	6023      	strmi	r3, [r4, #0]
 8002f30:	b91e      	cbnz	r6, 8002f3a <_printf_i+0x1a6>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f023 0320 	bic.w	r3, r3, #32
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	e7a6      	b.n	8002e8c <_printf_i+0xf8>
 8002f3e:	4824      	ldr	r0, [pc, #144]	; (8002fd0 <_printf_i+0x23c>)
 8002f40:	e7e4      	b.n	8002f0c <_printf_i+0x178>
 8002f42:	4615      	mov	r5, r2
 8002f44:	e7bd      	b.n	8002ec2 <_printf_i+0x12e>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	6826      	ldr	r6, [r4, #0]
 8002f4a:	1d18      	adds	r0, r3, #4
 8002f4c:	6961      	ldr	r1, [r4, #20]
 8002f4e:	6028      	str	r0, [r5, #0]
 8002f50:	0635      	lsls	r5, r6, #24
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	d501      	bpl.n	8002f5a <_printf_i+0x1c6>
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	e002      	b.n	8002f60 <_printf_i+0x1cc>
 8002f5a:	0670      	lsls	r0, r6, #25
 8002f5c:	d5fb      	bpl.n	8002f56 <_printf_i+0x1c2>
 8002f5e:	8019      	strh	r1, [r3, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	4615      	mov	r5, r2
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	e7bc      	b.n	8002ee2 <_printf_i+0x14e>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	1d1a      	adds	r2, r3, #4
 8002f6e:	602a      	str	r2, [r5, #0]
 8002f70:	681d      	ldr	r5, [r3, #0]
 8002f72:	6862      	ldr	r2, [r4, #4]
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 f859 	bl	800302c <memchr>
 8002f7a:	b108      	cbz	r0, 8002f80 <_printf_i+0x1ec>
 8002f7c:	1b40      	subs	r0, r0, r5
 8002f7e:	6060      	str	r0, [r4, #4]
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	2300      	movs	r3, #0
 8002f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8a:	e7aa      	b.n	8002ee2 <_printf_i+0x14e>
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4649      	mov	r1, r9
 8002f90:	4640      	mov	r0, r8
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	47d0      	blx	sl
 8002f96:	3001      	adds	r0, #1
 8002f98:	d0ad      	beq.n	8002ef6 <_printf_i+0x162>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	079b      	lsls	r3, r3, #30
 8002f9e:	d413      	bmi.n	8002fc8 <_printf_i+0x234>
 8002fa0:	68e0      	ldr	r0, [r4, #12]
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	4298      	cmp	r0, r3
 8002fa6:	bfb8      	it	lt
 8002fa8:	4618      	movlt	r0, r3
 8002faa:	e7a6      	b.n	8002efa <_printf_i+0x166>
 8002fac:	2301      	movs	r3, #1
 8002fae:	4632      	mov	r2, r6
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	47d0      	blx	sl
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d09d      	beq.n	8002ef6 <_printf_i+0x162>
 8002fba:	3501      	adds	r5, #1
 8002fbc:	68e3      	ldr	r3, [r4, #12]
 8002fbe:	9903      	ldr	r1, [sp, #12]
 8002fc0:	1a5b      	subs	r3, r3, r1
 8002fc2:	42ab      	cmp	r3, r5
 8002fc4:	dcf2      	bgt.n	8002fac <_printf_i+0x218>
 8002fc6:	e7eb      	b.n	8002fa0 <_printf_i+0x20c>
 8002fc8:	2500      	movs	r5, #0
 8002fca:	f104 0619 	add.w	r6, r4, #25
 8002fce:	e7f5      	b.n	8002fbc <_printf_i+0x228>
 8002fd0:	08003275 	.word	0x08003275
 8002fd4:	08003286 	.word	0x08003286

08002fd8 <memmove>:
 8002fd8:	4288      	cmp	r0, r1
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	eb01 0402 	add.w	r4, r1, r2
 8002fe0:	d902      	bls.n	8002fe8 <memmove+0x10>
 8002fe2:	4284      	cmp	r4, r0
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	d807      	bhi.n	8002ff8 <memmove+0x20>
 8002fe8:	1e43      	subs	r3, r0, #1
 8002fea:	42a1      	cmp	r1, r4
 8002fec:	d008      	beq.n	8003000 <memmove+0x28>
 8002fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ff6:	e7f8      	b.n	8002fea <memmove+0x12>
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	4402      	add	r2, r0
 8002ffc:	428a      	cmp	r2, r1
 8002ffe:	d100      	bne.n	8003002 <memmove+0x2a>
 8003000:	bd10      	pop	{r4, pc}
 8003002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800300a:	e7f7      	b.n	8002ffc <memmove+0x24>

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	2300      	movs	r3, #0
 8003010:	4d05      	ldr	r5, [pc, #20]	; (8003028 <_sbrk_r+0x1c>)
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7fd fe9c 	bl	8000d54 <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000294 	.word	0x20000294

0800302c <memchr>:
 800302c:	4603      	mov	r3, r0
 800302e:	b510      	push	{r4, lr}
 8003030:	b2c9      	uxtb	r1, r1
 8003032:	4402      	add	r2, r0
 8003034:	4293      	cmp	r3, r2
 8003036:	4618      	mov	r0, r3
 8003038:	d101      	bne.n	800303e <memchr+0x12>
 800303a:	2000      	movs	r0, #0
 800303c:	e003      	b.n	8003046 <memchr+0x1a>
 800303e:	7804      	ldrb	r4, [r0, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	428c      	cmp	r4, r1
 8003044:	d1f6      	bne.n	8003034 <memchr+0x8>
 8003046:	bd10      	pop	{r4, pc}

08003048 <memcpy>:
 8003048:	440a      	add	r2, r1
 800304a:	4291      	cmp	r1, r2
 800304c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003050:	d100      	bne.n	8003054 <memcpy+0xc>
 8003052:	4770      	bx	lr
 8003054:	b510      	push	{r4, lr}
 8003056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305a:	4291      	cmp	r1, r2
 800305c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003060:	d1f9      	bne.n	8003056 <memcpy+0xe>
 8003062:	bd10      	pop	{r4, pc}

08003064 <_realloc_r>:
 8003064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003068:	4680      	mov	r8, r0
 800306a:	4614      	mov	r4, r2
 800306c:	460e      	mov	r6, r1
 800306e:	b921      	cbnz	r1, 800307a <_realloc_r+0x16>
 8003070:	4611      	mov	r1, r2
 8003072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003076:	f7ff bc37 	b.w	80028e8 <_malloc_r>
 800307a:	b92a      	cbnz	r2, 8003088 <_realloc_r+0x24>
 800307c:	f7ff fbcc 	bl	8002818 <_free_r>
 8003080:	4625      	mov	r5, r4
 8003082:	4628      	mov	r0, r5
 8003084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003088:	f000 f81b 	bl	80030c2 <_malloc_usable_size_r>
 800308c:	4284      	cmp	r4, r0
 800308e:	4607      	mov	r7, r0
 8003090:	d802      	bhi.n	8003098 <_realloc_r+0x34>
 8003092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003096:	d812      	bhi.n	80030be <_realloc_r+0x5a>
 8003098:	4621      	mov	r1, r4
 800309a:	4640      	mov	r0, r8
 800309c:	f7ff fc24 	bl	80028e8 <_malloc_r>
 80030a0:	4605      	mov	r5, r0
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d0ed      	beq.n	8003082 <_realloc_r+0x1e>
 80030a6:	42bc      	cmp	r4, r7
 80030a8:	4622      	mov	r2, r4
 80030aa:	4631      	mov	r1, r6
 80030ac:	bf28      	it	cs
 80030ae:	463a      	movcs	r2, r7
 80030b0:	f7ff ffca 	bl	8003048 <memcpy>
 80030b4:	4631      	mov	r1, r6
 80030b6:	4640      	mov	r0, r8
 80030b8:	f7ff fbae 	bl	8002818 <_free_r>
 80030bc:	e7e1      	b.n	8003082 <_realloc_r+0x1e>
 80030be:	4635      	mov	r5, r6
 80030c0:	e7df      	b.n	8003082 <_realloc_r+0x1e>

080030c2 <_malloc_usable_size_r>:
 80030c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030c6:	1f18      	subs	r0, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bfbc      	itt	lt
 80030cc:	580b      	ldrlt	r3, [r1, r0]
 80030ce:	18c0      	addlt	r0, r0, r3
 80030d0:	4770      	bx	lr
	...

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
